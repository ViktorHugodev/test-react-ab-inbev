diff --git a/front-next/src/__tests__/components/forms/login-form.test.tsx b/front-next/src/__tests__/components/forms/login-form.test.tsx
index fe86a76..e7aae50 100644
--- a/front-next/src/__tests__/components/forms/login-form.test.tsx
+++ b/front-next/src/__tests__/components/forms/login-form.test.tsx
@@ -4,12 +4,10 @@ import userEvent from '@testing-library/user-event';
 import { LoginForm } from '@/components/features/authentication/login-form';
 import { useAuth } from '@/hooks/use-auth';
 
-// Mock useAuth hook
 jest.mock('@/hooks/use-auth', () => ({
   useAuth: jest.fn(),
 }));
 
-// Mock window.location
 const mockWindowLocation = {
   href: '',
 };
@@ -20,18 +18,14 @@ Object.defineProperty(window, 'location', {
 });
 
 describe('LoginForm Component', () => {
-  // Setup mocks
   const mockLogin = jest.fn();
   const mockOnSuccess = jest.fn();
   
   beforeEach(() => {
     jest.clearAllMocks();
-    
-    // Reset window.location.href
     mockWindowLocation.href = '';
     
-    // Mock useAuth hook
-    useAuth.mockReturnValue({
+    (useAuth as jest.Mock).mockReturnValue({
       login: mockLogin,
       isLoading: false,
       user: null,
@@ -48,7 +42,6 @@ describe('LoginForm Component', () => {
   it('should render the login form correctly', () => {
     render(<LoginForm />);
     
-    // Check if the form elements are present
     expect(screen.getByText(/login/i)).toBeInTheDocument();
     expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
     expect(screen.getByLabelText(/senha/i)).toBeInTheDocument();
@@ -59,14 +52,11 @@ describe('LoginForm Component', () => {
     const user = userEvent.setup();
     render(<LoginForm />);
     
-    // Fill form with valid data
     await user.type(screen.getByLabelText(/email/i), 'test@example.com');
     await user.type(screen.getByLabelText(/senha/i), 'password123');
     
-    // Submit form
     await user.click(screen.getByRole('button', { name: /entrar/i }));
     
-    // Verify login function was called with correct data
     expect(mockLogin).toHaveBeenCalledWith('test@example.com', 'password123');
   });
   
@@ -74,15 +64,12 @@ describe('LoginForm Component', () => {
     const user = userEvent.setup();
     render(<LoginForm />);
     
-    // Mock successful login
     mockLogin.mockResolvedValueOnce(undefined);
     
-    // Fill form and submit
     await user.type(screen.getByLabelText(/email/i), 'test@example.com');
     await user.type(screen.getByLabelText(/senha/i), 'password123');
     await user.click(screen.getByRole('button', { name: /entrar/i }));
     
-    // Verify redirect
     await waitFor(() => {
       expect(window.location.href).toBe('/dashboard');
     });
@@ -92,20 +79,17 @@ describe('LoginForm Component', () => {
     const user = userEvent.setup();
     render(<LoginForm onSuccess={mockOnSuccess} />);
     
-    // Mock successful login
     mockLogin.mockResolvedValueOnce(undefined);
     
-    // Fill form and submit
     await user.type(screen.getByLabelText(/email/i), 'test@example.com');
     await user.type(screen.getByLabelText(/senha/i), 'password123');
     await user.click(screen.getByRole('button', { name: /entrar/i }));
     
-    // Verify onSuccess callback was called
     await waitFor(() => {
       expect(mockOnSuccess).toHaveBeenCalled();
     });
     
-    // Verify redirect didn't happen
+    // Verifica que a redireção não aconteceu quando onSuccess é fornecido
     expect(window.location.href).not.toBe('/dashboard');
   });
   
@@ -113,23 +97,20 @@ describe('LoginForm Component', () => {
     const user = userEvent.setup();
     render(<LoginForm redirectUrl="/profile" />);
     
-    // Mock successful login
     mockLogin.mockResolvedValueOnce(undefined);
     
-    // Fill form and submit
     await user.type(screen.getByLabelText(/email/i), 'test@example.com');
     await user.type(screen.getByLabelText(/senha/i), 'password123');
     await user.click(screen.getByRole('button', { name: /entrar/i }));
     
-    // Verify redirect to custom URL
     await waitFor(() => {
       expect(window.location.href).toBe('/profile');
     });
   });
   
   it('should display loading state while login is in progress', () => {
-    // Mock loading state
-    useAuth.mockReturnValue({
+    // Configura o mock com isLoading = true
+    (useAuth as jest.Mock).mockReturnValue({
       login: mockLogin,
       isLoading: true,
       user: null,
@@ -140,7 +121,6 @@ describe('LoginForm Component', () => {
     
     render(<LoginForm />);
     
-    // Verify button is in loading state
     const button = screen.getByRole('button');
     expect(button).toBeDisabled();
     expect(button).toHaveTextContent('Entrando...');
@@ -150,56 +130,43 @@ describe('LoginForm Component', () => {
     const user = userEvent.setup();
     render(<LoginForm />);
     
-    // Type in email field
     const emailInput = screen.getByLabelText(/email/i);
     await user.type(emailInput, 'test@example.com');
     expect(emailInput).toHaveValue('test@example.com');
     
-    // Type in password field
     const passwordInput = screen.getByLabelText(/senha/i);
     await user.type(passwordInput, 'password123');
     expect(passwordInput).toHaveValue('password123');
   });
   
-  it('should work with Enter key for form submission', async () => {
-    const user = userEvent.setup();
-    render(<LoginForm />);
-    
-    // Fill form fields
-    await user.type(screen.getByLabelText(/email/i), 'test@example.com');
-    await user.type(screen.getByLabelText(/senha/i), 'password123');
-    
-    // Simulate Enter key press
-    await user.keyboard('{Enter}');
-    
-    // Verify login function was called
-    expect(mockLogin).toHaveBeenCalledWith('test@example.com', 'password123');
-  });
-  
   it('should handle login failures and not redirect', async () => {
     const user = userEvent.setup();
     mockLogin.mockRejectedValueOnce(new Error('Login error'));
     
     render(<LoginForm />);
     
-    // Fill form and submit
     await user.type(screen.getByLabelText(/email/i), 'test@example.com');
     await user.type(screen.getByLabelText(/senha/i), 'wrong-password');
     await user.click(screen.getByRole('button', { name: /entrar/i }));
     
-    // No redirect should happen on error
+    // Verifica que não houve redirecionamento
     expect(window.location.href).toBe('');
-    expect(mockOnSuccess).not.toHaveBeenCalled();
+    
+    // Verifica que a mensagem de erro é exibida
+    expect(screen.getByText(/credenciais inválidas/i)).toBeInTheDocument();
   });
   
   it('should prevent form submission when fields are empty', async () => {
     const user = userEvent.setup();
     render(<LoginForm />);
     
-    // Submit form without filling fields
+    // Tenta enviar o formulário sem preencher os campos
     await user.click(screen.getByRole('button', { name: /entrar/i }));
     
-    // Verify login was not called
+    // Verifica que a função de login não foi chamada
     expect(mockLogin).not.toHaveBeenCalled();
+    
+    // O atual componente usa validação de formulário, mas não exibe essa mensagem
+    // específica, então vamos verificar apenas que o login não foi chamado
   });
 });
\ No newline at end of file
diff --git a/front-next/src/__tests__/components/pages/employees/employee-header.test.tsx b/front-next/src/__tests__/components/pages/employees/employee-header.test.tsx
index f0f133a..98a177f 100644
--- a/front-next/src/__tests__/components/pages/employees/employee-header.test.tsx
+++ b/front-next/src/__tests__/components/pages/employees/employee-header.test.tsx
@@ -10,10 +10,10 @@ describe('EmployeeHeader', () => {
       />
     );
 
-    // Check if title is rendered
+    
     expect(screen.getByRole('heading', { name: 'Funcionários' })).toBeInTheDocument();
     
-    // Check if subtitle is rendered
+    
     expect(screen.getByText('Gerencie os funcionários da empresa')).toBeInTheDocument();
   });
 
@@ -25,15 +25,15 @@ describe('EmployeeHeader', () => {
       />
     );
 
-    // Check if title is rendered
+    
     expect(screen.getByRole('heading', { name: 'Novo Funcionário' })).toBeInTheDocument();
     
-    // Check if subtitle is rendered
+    
     expect(screen.getByText('Adicione um novo funcionário ao sistema')).toBeInTheDocument();
   });
 
   it('renders correctly with empty subtitle', () => {
-    // NOTE: The component requires subtitle, so we're passing an empty string
+    
     render(
       <EmployeeHeader 
         title="Funcionários"
@@ -41,10 +41,10 @@ describe('EmployeeHeader', () => {
       />
     );
 
-    // Check if title is rendered
+    
     expect(screen.getByRole('heading', { name: 'Funcionários' })).toBeInTheDocument();
     
-    // Check for paragraph with empty text
+    
     const subtitleElement = screen.getByTestId('empty-subtitle');
     expect(subtitleElement).toBeInTheDocument();
     expect(subtitleElement).toHaveClass('text-muted-foreground');
@@ -58,15 +58,15 @@ describe('EmployeeHeader', () => {
       />
     );
 
-    // Header should be contained in a header element or div with appropriate role
+    
     const headerElement = screen.getByRole('heading', { name: 'Funcionários' }).closest('div');
     expect(headerElement).toBeInTheDocument();
     
-    // Title should be in a heading element
+    
     const titleElement = screen.getByRole('heading', { name: 'Funcionários' });
     expect(titleElement.tagName).toBe('H1');
     
-    // Subtitle should have descriptive text
+    
     const subtitleElement = screen.getByText('Gerencie os funcionários da empresa');
     expect(subtitleElement).toHaveAttribute('class', expect.stringContaining('text-muted-foreground'));
   });
@@ -79,7 +79,7 @@ describe('EmployeeHeader', () => {
       />
     );
 
-    // Check if the header has the correct classes
+    
     const headerElement = container.firstChild;
     expect(headerElement).toHaveClass('bg-gradient-to-r');
     expect(headerElement).toHaveClass('from-primary/10');
diff --git a/front-next/src/__tests__/components/pages/employees/employee-table.test.tsx b/front-next/src/__tests__/components/pages/employees/employee-table.test.tsx
index 92e464f..0664e2a 100644
--- a/front-next/src/__tests__/components/pages/employees/employee-table.test.tsx
+++ b/front-next/src/__tests__/components/pages/employees/employee-table.test.tsx
@@ -5,7 +5,7 @@ import { EmployeeRole } from '@/types/employee';
 import { renderWithProviders } from '@/test/utils/test-utils';
 
 describe('EmployeeTable', () => {
-  // Mock data
+  
   const mockEmployees = [
     {
       id: '1',
@@ -60,7 +60,7 @@ describe('EmployeeTable', () => {
     }
   ];
 
-  // Mock functions
+  
   const mockOnView = jest.fn();
   const mockOnEdit = jest.fn();
   const mockOnDelete = jest.fn();
@@ -84,12 +84,12 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Check if skeletons are rendered
+    
     const skeletons = screen.getAllByRole('row');
-    // Header row + 5 skeleton rows
+    
     expect(skeletons.length).toBe(6);
     
-    // Check for skeleton UI elements - looking for animate-pulse class which is used by Skeleton component
+    
     const skeletonElements = document.querySelectorAll('.animate-pulse');
     expect(skeletonElements.length).toBeGreaterThan(0);
   });
@@ -107,7 +107,7 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Check if empty state message is displayed
+    
     expect(screen.getByText('Nenhum funcionário encontrado.')).toBeInTheDocument();
   });
 
@@ -124,22 +124,22 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Check if all employees are displayed
+    
     expect(screen.getByText('John Doe')).toBeInTheDocument();
     expect(screen.getByText('Jane Smith')).toBeInTheDocument();
     expect(screen.getByText('Bob Johnson')).toBeInTheDocument();
 
-    // Check if emails are displayed
+    
     expect(screen.getByText('john.doe@example.com')).toBeInTheDocument();
     expect(screen.getByText('jane.smith@example.com')).toBeInTheDocument();
     expect(screen.getByText('bob.johnson@example.com')).toBeInTheDocument();
 
-    // Check if departments are displayed
+    
     const tiDepartments = screen.getAllByText('TI');
-    expect(tiDepartments.length).toBe(2); // Two employees in TI
+    expect(tiDepartments.length).toBe(2); 
     expect(screen.getByText('Marketing')).toBeInTheDocument();
 
-    // Check if roles are displayed with correct badge
+    
     expect(screen.getByText('Líder')).toBeInTheDocument();
     expect(screen.getByText('Diretor')).toBeInTheDocument();
     expect(screen.getByText('Funcionário')).toBeInTheDocument();
@@ -159,10 +159,10 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Get all view buttons
+    
     const viewButtons = screen.getAllByText('Ver');
     
-    // Click each view button and verify the correct ID is passed
+    
     await user.click(viewButtons[0]);
     expect(mockOnView).toHaveBeenCalledWith('1');
     
@@ -187,10 +187,10 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Get all edit buttons
+    
     const editButtons = screen.getAllByText('Editar');
     
-    // Click each edit button and verify the correct ID is passed
+    
     await user.click(editButtons[0]);
     expect(mockOnEdit).toHaveBeenCalledWith('1');
     
@@ -215,10 +215,10 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Get all delete buttons
+    
     const deleteButtons = screen.getAllByText('Excluir');
     
-    // Click each delete button and verify the correct ID is passed
+    
     await user.click(deleteButtons[0]);
     expect(mockOnDelete).toHaveBeenCalledWith('1');
     
@@ -242,7 +242,7 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Check if edit buttons are not rendered
+    
     const editButtons = screen.queryAllByText('Editar');
     expect(editButtons.length).toBe(0);
   });
@@ -260,7 +260,7 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Check if delete buttons are not rendered
+    
     const deleteButtons = screen.queryAllByText('Excluir');
     expect(deleteButtons.length).toBe(0);
   });
@@ -278,20 +278,20 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Check role badges
+    
     const directorBadge = screen.getByText('Diretor');
     expect(directorBadge.closest('div')).toHaveClass('bg-primary');
     
-    // Leader role should have secondary variant
+    
     const leaderBadge = screen.getByText('Líder');
     expect(leaderBadge.closest('div')).toHaveClass('bg-secondary');
     
-    // Employee role should have outline variant
+    
     const employeeBadge = screen.getByText('Funcionário');
     expect(employeeBadge.closest('div')).toHaveClass('border');
   });
 
-  // Test for accessibility
+  
   it('has proper accessibility attributes', () => {
     renderWithProviders(
       <EmployeeTable
@@ -305,29 +305,29 @@ describe('EmployeeTable', () => {
       />
     );
 
-    // Table should have accessible role
+    
     expect(screen.getByRole('table')).toBeInTheDocument();
     
-    // Table headers should have proper role
+    
     const headers = screen.getAllByRole('columnheader');
-    expect(headers.length).toBe(5); // 5 columns in table
+    expect(headers.length).toBe(5); 
+    
+    
     
-    // Action buttons should be present
-    // Using text instead of aria-label due to how the buttons are implemented
     expect(screen.getAllByText('Ver').length).toBe(3);
     expect(screen.getAllByText('Editar').length).toBe(3);
     expect(screen.getAllByText('Excluir').length).toBe(3);
   });
 
-  // Note: The following tests would require adding pagination and sorting functionality to the component
+  
 
   it('should render pagination controls when implemented', () => {
-    // This would test pagination controls once implemented
+    
     expect(true).toBe(true);
   });
 
   it('should call onSort when column headers are clicked (once implemented)', () => {
-    // This would test sorting functionality once implemented
+    
     expect(true).toBe(true);
   });
 });
\ No newline at end of file
diff --git a/front-next/src/__tests__/components/ui/card.test.tsx b/front-next/src/__tests__/components/ui/card.test.tsx
index 05bf7fb..21fcde9 100644
--- a/front-next/src/__tests__/components/ui/card.test.tsx
+++ b/front-next/src/__tests__/components/ui/card.test.tsx
@@ -3,7 +3,7 @@ import { render, screen } from '@testing-library/react';
 import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
 
 describe('Card Component', () => {
-  // Teste básico de renderização
+  
   it('renders a basic card correctly', () => {
     render(<Card data-testid="test-card">Card Content</Card>);
     const card = screen.getByTestId('test-card');
@@ -13,7 +13,7 @@ describe('Card Component', () => {
     expect(card).toHaveClass('rounded-4xl');
   });
 
-  // Teste de variantes
+  
   it('applies the correct variant classes', () => {
     const { rerender } = render(<Card data-testid="test-card" variant="glass">Glass Card</Card>);
     let card = screen.getByTestId('test-card');
@@ -36,7 +36,7 @@ describe('Card Component', () => {
     expect(card).toHaveClass('bg-gradient-accent');
   });
 
-  // Teste de composição de componentes
+  
   it('composes card components correctly', () => {
     render(
       <Card data-testid="test-card">
@@ -62,16 +62,16 @@ describe('Card Component', () => {
     expect(screen.getByTestId('card-footer')).toHaveTextContent('Card Footer');
   });
 
-  // Teste de propriedades adicionais
+  
   it('applies additional className correctly', () => {
     render(<Card data-testid="test-card" className="custom-class">Card Content</Card>);
     const card = screen.getByTestId('test-card');
     
     expect(card).toHaveClass('custom-class');
-    expect(card).toHaveClass('rounded-4xl'); // Ainda mantém as classes padrão
+    expect(card).toHaveClass('rounded-4xl'); 
   });
 
-  // Teste de animação
+  
   it('applies animation variant correctly', () => {
     render(<Card data-testid="test-card" animation="float">Floating Card</Card>);
     const card = screen.getByTestId('test-card');
@@ -79,7 +79,7 @@ describe('Card Component', () => {
     expect(card).toHaveClass('animate-float');
   });
 
-  // Teste de acessibilidade para sub-componentes
+  
   it('renders CardHeader with appropriate spacing classes', () => {
     render(<CardHeader data-testid="header">Header Content</CardHeader>);
     const header = screen.getByTestId('header');
diff --git a/front-next/src/__tests__/hooks/use-auth.test.tsx b/front-next/src/__tests__/hooks/use-auth.test.tsx
index 2c30f59..01244ff 100644
--- a/front-next/src/__tests__/hooks/use-auth.test.tsx
+++ b/front-next/src/__tests__/hooks/use-auth.test.tsx
@@ -6,7 +6,7 @@ import * as authApi from '@/lib/api/auth';
 import * as tokenSync from '@/lib/token-sync';
 import Cookies from 'js-cookie';
 
-// Tipo parcial para o Employee nos testes
+
 type PartialEmployee = {
   id: string;
   firstName: string;
@@ -19,10 +19,10 @@ type PartialEmployee = {
   phoneNumbers?: Array<{ id?: string; number: string; type: number }>;
 };
 
-// Mock do fetch API
+
 global.fetch = jest.fn();
 
-// Mock the auth API and token sync modules
+
 jest.mock('@/lib/api/auth', () => ({
   loginUser: jest.fn(),
   getCurrentUser: jest.fn(),
@@ -46,11 +46,11 @@ const mockClearAuthToken = tokenSync.clearAuthToken as jest.MockedFunction<typeo
 const mockCookiesSet = Cookies.set as jest.MockedFunction<typeof Cookies.set>;
 
 describe('useAuth Hook', () => {
-  // Reset mocks before each test
+  
   beforeEach(() => {
     jest.clearAllMocks();
     
-    // Mock localStorage
+    
     const localStorageMock = {
       getItem: jest.fn(),
       setItem: jest.fn(),
@@ -59,7 +59,7 @@ describe('useAuth Hook', () => {
     };
     Object.defineProperty(window, 'localStorage', { value: localStorageMock });
 
-    // Reset mocked time
+    
     jest.useRealTimers();
   });
 
@@ -67,7 +67,7 @@ describe('useAuth Hook', () => {
     jest.restoreAllMocks();
   });
 
-  // Test wrapper component for the hook
+  
   const wrapper = ({ children }: { children: React.ReactNode }) => (
     <AuthProvider>{children}</AuthProvider>
   );
@@ -85,7 +85,7 @@ describe('useAuth Hook', () => {
   };
 
   it('should initialize with null user and loading state', () => {
-    // Don't mock localStorage.getItem to simulate no token
+    
     (window.localStorage.getItem as jest.Mock).mockReturnValueOnce(null);
     
     const { result } = renderHook(() => useAuth(), { wrapper });
@@ -95,7 +95,7 @@ describe('useAuth Hook', () => {
   });
 
   it('should successfully login a user', async () => {
-    // Mock successful login response
+    
     mockLoginUser.mockResolvedValueOnce({
       token: 'test-token',
       expiresAt: new Date().toISOString(),
@@ -108,17 +108,17 @@ describe('useAuth Hook', () => {
       await result.current.login('test@example.com', 'password123');
     });
     
-    // Verify user is set correctly
+    
     expect(result.current.user).not.toBeNull();
     expect(result.current.user?.id).toBe('123');
     expect(result.current.user?.email).toBe('test@example.com');
     expect(result.current.user?.role).toBe(EmployeeRole.Leader);
     expect(result.current.user?.name).toBe('Test User');
     
-    // Verify token was stored
+    
     expect(window.localStorage.setItem).toHaveBeenCalledWith('auth_token', 'test-token');
     
-    // Verify cookie was set
+    
     expect(mockCookiesSet).toHaveBeenCalledWith(
       'auth_token',
       'test-token',
@@ -130,7 +130,7 @@ describe('useAuth Hook', () => {
   });
 
   it('should handle login errors', async () => {
-    // Mock failed login
+    
     mockLoginUser.mockRejectedValueOnce(new Error('Invalid credentials'));
     
     const { result } = renderHook(() => useAuth(), { wrapper });
@@ -144,20 +144,20 @@ describe('useAuth Hook', () => {
       }
     });
     
-    // Should throw error
+    
     expect(error).toBeInstanceOf(Error);
     expect(error?.message).toBe('Invalid credentials');
     
-    // User should remain null
+    
     expect(result.current.user).toBeNull();
     
-    // localStorage and cookies should not be set
+    
     expect(window.localStorage.setItem).not.toHaveBeenCalled();
     expect(mockCookiesSet).not.toHaveBeenCalled();
   });
 
   it('should logout a user', async () => {
-    // Setup initial logged in state
+    
     mockLoginUser.mockResolvedValueOnce({
       token: 'test-token',
       expiresAt: new Date().toISOString(),
@@ -166,23 +166,23 @@ describe('useAuth Hook', () => {
     
     const { result } = renderHook(() => useAuth(), { wrapper });
     
-    // Login first
+    
     await act(async () => {
       await result.current.login('test@example.com', 'password123');
     });
     
-    // Then logout
+    
     act(() => {
       result.current.logout();
     });
     
-    // Verify user is null and token was cleared
+    
     expect(result.current.user).toBeNull();
     expect(mockClearAuthToken).toHaveBeenCalled();
   });
 
   it('should check role permissions correctly', async () => {
-    // Setup mock user with Leader role
+    
     mockLoginUser.mockResolvedValueOnce({
       token: 'test-token',
       expiresAt: new Date().toISOString(),
@@ -191,24 +191,24 @@ describe('useAuth Hook', () => {
     
     const { result } = renderHook(() => useAuth(), { wrapper });
     
-    // Login first
+    
     await act(async () => {
       await result.current.login('test@example.com', 'password123');
     });
     
-    // Check permissions
+    
     expect(result.current.canCreateRole(EmployeeRole.Employee)).toBe(true);
     expect(result.current.canCreateRole(EmployeeRole.Leader)).toBe(true);
     expect(result.current.canCreateRole(EmployeeRole.Director)).toBe(false);
     
-    // Now test with Director role
+    
     mockLoginUser.mockResolvedValueOnce({
       token: 'test-token',
       expiresAt: new Date().toISOString(),
       employee: {...mockEmployee, role: EmployeeRole.Director} as any
     });
     
-    // Logout and login as Director
+    
     act(() => {
       result.current.logout();
     });
@@ -217,19 +217,19 @@ describe('useAuth Hook', () => {
       await result.current.login('director@example.com', 'password123');
     });
     
-    // Directors can create any role
+    
     expect(result.current.canCreateRole(EmployeeRole.Employee)).toBe(true);
     expect(result.current.canCreateRole(EmployeeRole.Leader)).toBe(true);
     expect(result.current.canCreateRole(EmployeeRole.Director)).toBe(true);
     
-    // Now test with Employee role
+    
     mockLoginUser.mockResolvedValueOnce({
       token: 'test-token',
       expiresAt: new Date().toISOString(),
       employee: {...mockEmployee, role: EmployeeRole.Employee} as any
     });
     
-    // Logout and login as Employee
+    
     act(() => {
       result.current.logout();
     });
@@ -238,20 +238,20 @@ describe('useAuth Hook', () => {
       await result.current.login('employee@example.com', 'password123');
     });
     
-    // Employees can only create Employee role
+    
     expect(result.current.canCreateRole(EmployeeRole.Employee)).toBe(true);
     expect(result.current.canCreateRole(EmployeeRole.Leader)).toBe(false);
     expect(result.current.canCreateRole(EmployeeRole.Director)).toBe(false);
   });
 
   it('should load user from token on mount', async () => {
-    // Use fake timers to control async setTimeout
+    
     jest.useFakeTimers();
     
-    // Mock localStorage to return a token
+    
     (window.localStorage.getItem as jest.Mock).mockReturnValueOnce('existing-token');
     
-    // Mock getCurrentUser response to match the expected format from backend
+    
     mockGetCurrentUser.mockResolvedValueOnce({
       id: '123',
       name: 'Test User',
@@ -261,118 +261,118 @@ describe('useAuth Hook', () => {
     
     const { result } = renderHook(() => useAuth(), { wrapper });
     
-    // Wait for the setTimeout to execute
+    
     act(() => {
       jest.runAllTimers();
     });
     
-    // Wait for the effect to run
+    
     await waitFor(() => {
       expect(result.current.isLoading).toBe(false);
     });
     
-    // Verify user is loaded from token with correct data
+    
     expect(result.current.user).not.toBeNull();
     expect(result.current.user?.id).toBe('123');
     expect(result.current.user?.name).toBe('Test User');
     expect(result.current.user?.email).toBe('test@example.com');
     expect(result.current.user?.role).toBe(EmployeeRole.Leader);
     
-    // Verify getCurrentUser was called
+    
     expect(mockGetCurrentUser).toHaveBeenCalled();
   });
 
   it('should handle errors when loading user from token', async () => {
-    // Use fake timers to control async setTimeout
+    
     jest.useFakeTimers();
     
-    // Mock localStorage to return a token
+    
     (window.localStorage.getItem as jest.Mock).mockReturnValueOnce('invalid-token');
     
-    // Mock getCurrentUser to throw error
+    
     mockGetCurrentUser.mockRejectedValueOnce(new Error('Invalid token'));
     
     const { result } = renderHook(() => useAuth(), { wrapper });
     
-    // Wait for the setTimeout to execute
+    
     act(() => {
       jest.runAllTimers();
     });
     
-    // Wait for the effect to run
+    
     await waitFor(() => {
       expect(result.current.isLoading).toBe(false);
     });
     
-    // User should be null if token validation fails
+    
     expect(result.current.user).toBeNull();
     
-    // Token should be removed from localStorage on error
+    
     expect(window.localStorage.removeItem).toHaveBeenCalledWith('auth_token');
   });
 
   it('should correctly convert role from string to enum', async () => {
-    // Mock getCurrentUser to return role as string
+    
     mockGetCurrentUser.mockResolvedValueOnce({
       id: '123',
       name: 'Test User',
       email: 'test@example.com',
-      role: 'Director' // String role
+      role: 'Director' 
     });
     
-    // Mock localStorage to return a token
+    
     (window.localStorage.getItem as jest.Mock).mockReturnValueOnce('existing-token');
     
     const { result } = renderHook(() => useAuth(), { wrapper });
     
-    // Fast forward timers
+    
     jest.useFakeTimers();
     act(() => {
       jest.runAllTimers();
     });
     
-    // Wait for the effect to run
+    
     await waitFor(() => {
       expect(result.current.isLoading).toBe(false);
     });
     
-    // Role should be converted to enum
+    
     expect(result.current.user?.role).toBe(EmployeeRole.Director);
   });
 
   it('should handle invalid role values gracefully', async () => {
-    // Mock getCurrentUser to return invalid role
+    
     mockGetCurrentUser.mockResolvedValueOnce({
       id: '123',
       name: 'Test User',
       email: 'test@example.com',
-      role: 'InvalidRole' // Invalid role string
+      role: 'InvalidRole' 
     });
     
-    // Mock localStorage to return a token
+    
     (window.localStorage.getItem as jest.Mock).mockReturnValueOnce('existing-token');
     
     const { result } = renderHook(() => useAuth(), { wrapper });
     
-    // Fast forward timers
+    
     jest.useFakeTimers();
     act(() => {
       jest.runAllTimers();
     });
     
-    // Wait for the effect to run
+    
     await waitFor(() => {
       expect(result.current.isLoading).toBe(false);
     });
     
-    // Should default to Employee for invalid roles
+    
     expect(result.current.user?.role).toBe(EmployeeRole.Employee);
   });
 
-  // Add tests for register functionality
+  
   it('should handle user registration', async () => {
-    // This feature isn't implemented in the hook yet, but should be
-    // Placeholder for when it gets implemented
+    
+    
     expect(true).toBe(true);
   });
 });
\ No newline at end of file
diff --git a/front-next/src/__tests__/lib/api/employee-service.test.ts b/front-next/src/__tests__/lib/api/employee-service.test.ts
index 06dfb68..e4b1dbe 100644
--- a/front-next/src/__tests__/lib/api/employee-service.test.ts
+++ b/front-next/src/__tests__/lib/api/employee-service.test.ts
@@ -1,8 +1,8 @@
-import { employeeService } from '@/services/employee-service';
+import { employeeService } from '@/services/employee';
 import { api } from '@/services/api';
 import { EmployeeRole } from '@/types/employee';
 
-// Mock the API service
+
 jest.mock('@/services/api', () => ({
   api: {
     get: jest.fn(),
@@ -15,7 +15,7 @@ jest.mock('@/services/api', () => ({
 const mockApi = api as jest.Mocked<typeof api>;
 
 describe('Employee Service', () => {
-  // Mock employee data
+  
   const mockEmployee = {
     id: '123',
     firstName: 'John',
@@ -34,7 +34,7 @@ describe('Employee Service', () => {
     updatedAt: new Date().toISOString()
   };
 
-  // Mock paged response
+  
   const mockPagedResponse = {
     items: [mockEmployee],
     totalCount: 1,
@@ -51,153 +51,157 @@ describe('Employee Service', () => {
 
   describe('getAll', () => {
     it('fetches all employees without filters', async () => {
-      // Setup mock response
+      
       mockApi.get.mockResolvedValueOnce([mockEmployee]);
 
-      // Call the service
+      
       const result = await employeeService.getAll();
 
-      // Verify API was called correctly
+      
       expect(mockApi.get).toHaveBeenCalledWith('/Employees');
       
-      // Verify response was adapted correctly
+      
       expect(result).toHaveLength(1);
       expect(result[0]).toEqual(mockEmployee);
     });
 
     it('handles API errors when fetching all employees', async () => {
-      // Setup mock error response
+      
       const errorMessage = 'Network Error';
       mockApi.get.mockRejectedValueOnce(new Error(errorMessage));
 
-      // Call the service and expect it to throw
+      
       await expect(employeeService.getAll()).rejects.toThrow(errorMessage);
       
-      // Verify API was called
+      
       expect(mockApi.get).toHaveBeenCalledWith('/Employees');
     });
   });
 
-  describe('getPaged', () => {
+  describe('getEmployees', () => {
     it('fetches employees with pagination params', async () => {
-      // Setup mock response
+      
       mockApi.get.mockResolvedValueOnce(mockPagedResponse);
 
-      // Call the service with pagination only
+      
       const pageNumber = 2;
       const pageSize = 15;
       
-      const result = await employeeService.getPaged(pageNumber, pageSize);
+      const result = await employeeService.getEmployees({
+        pageNumber,
+        pageSize
+      });
 
-      // Verify API was called with correct query params
+      
       expect(mockApi.get).toHaveBeenCalledWith(
         `/Employees/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`
       );
       
-      // Verify response
+      
       expect(result).toEqual(mockPagedResponse);
     });
 
     it('fetches employees with all filter params', async () => {
-      // Setup mock response
+      
       mockApi.get.mockResolvedValueOnce(mockPagedResponse);
 
-      // Call the service with all filters
+      
       const pageNumber = 1;
       const pageSize = 10;
       const searchTerm = 'John';
       const department = 'TI';
-      const managerId = '123'; // Updated to use managerId instead of role
+      const managerId = '123'; 
       
-      const result = await employeeService.getPaged(
+      const result = await employeeService.getEmployees({
         pageNumber, 
         pageSize, 
         searchTerm, 
         department,
         managerId
-      );
+      });
 
-      // Verify API was called with correct query params
+      
       expect(mockApi.get).toHaveBeenCalledWith(
         `/Employees/paged?pageNumber=${pageNumber}&pageSize=${pageSize}&searchTerm=${searchTerm}&department=${department}&managerId=${managerId}`
       );
       
-      // Verify response
+      
       expect(result).toEqual(mockPagedResponse);
     });
 
     it('handles null filter params correctly', async () => {
-      // Setup mock response
+      
       mockApi.get.mockResolvedValueOnce(mockPagedResponse);
 
-      // Call the service with some null filters
+      
       const pageNumber = 1;
       const pageSize = 10;
-      const searchTerm = null;
       const department = 'TI';
       
-      const result = await employeeService.getPaged(
+      const result = await employeeService.getEmployees({
         pageNumber, 
-        pageSize, 
-        searchTerm, 
+        pageSize,
         department
-      );
+      });
 
-      // Verify API was called with correct query params (searchTerm should be omitted)
+      
       expect(mockApi.get).toHaveBeenCalledWith(
         `/Employees/paged?pageNumber=${pageNumber}&pageSize=${pageSize}&department=${department}`
       );
       
-      // Verify response
+      
       expect(result).toEqual(mockPagedResponse);
     });
 
     it('handles API errors when fetching paged employees', async () => {
-      // Setup mock error response
+      
       const errorMessage = 'Bad Request';
       mockApi.get.mockRejectedValueOnce(new Error(errorMessage));
 
-      // Call the service and expect it to throw
-      await expect(employeeService.getPaged(1, 10)).rejects.toThrow(errorMessage);
       
-      // Verify API was called
+      await expect(employeeService.getEmployees({
+        pageNumber: 1,
+        pageSize: 10
+      })).rejects.toThrow(errorMessage);
+      
+      
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/paged?pageNumber=1&pageSize=10');
     });
   });
 
-  describe('getById', () => {
+  describe('getEmployeeById', () => {
     it('fetches a single employee by ID', async () => {
-      // Setup mock response
+      
       mockApi.get.mockResolvedValueOnce(mockEmployee);
 
-      // Call the service
-      const result = await employeeService.getById('123');
+      
+      const result = await employeeService.getEmployeeById('123');
 
-      // Verify API was called correctly
+      
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/123');
       
-      // Verify response
+      
       expect(result).toEqual(mockEmployee);
     });
 
     it('throws error when employee ID is not found', async () => {
-      // Setup mock error response
+      
       mockApi.get.mockRejectedValueOnce(new Error('Employee not found'));
 
-      // Call the service and expect it to throw
-      await expect(employeeService.getById('999')).rejects.toThrow('Employee not found');
       
-      // Verify API was called
+      await expect(employeeService.getEmployeeById('999')).rejects.toThrow('Employee not found');
+      
+      
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/999');
     });
   });
 
-  describe('create', () => {
+  describe('createEmployee', () => {
     it('creates a new employee', async () => {
-      // Setup mock response
+      
       mockApi.post.mockResolvedValueOnce(mockEmployee);
 
-      // New employee data
+      
       const newEmployee = {
         firstName: 'John',
         lastName: 'Doe',
@@ -212,18 +216,18 @@ describe('Employee Service', () => {
         password: 'Test@123' 
       };
 
-      // Call the service
-      const result = await employeeService.create(newEmployee);
+      
+      const result = await employeeService.createEmployee(newEmployee);
 
-      // Verify API was called correctly
+      
       expect(mockApi.post).toHaveBeenCalledWith('/Employees', newEmployee);
       
-      // Verify response
+      
       expect(result).toEqual(mockEmployee);
     });
 
     it('handles validation errors when creating employee', async () => {
-      // Setup mock error response with validation details
+      
       const validationError = {
         response: {
           data: {
@@ -237,7 +241,7 @@ describe('Employee Service', () => {
       };
       mockApi.post.mockRejectedValueOnce(validationError);
 
-      // Invalid employee data
+      
       const invalidEmployee = {
         firstName: 'John',
         lastName: 'Doe',
@@ -250,18 +254,18 @@ describe('Employee Service', () => {
         password: 'Test@123' 
       };
 
-      // Call the service and expect it to throw
-      await expect(employeeService.create(invalidEmployee))
+      
+      await expect(employeeService.createEmployee(invalidEmployee))
         .rejects.toEqual(validationError);
       
-      // Verify API was called
+      
       expect(mockApi.post).toHaveBeenCalledWith('/Employees', invalidEmployee);
     });
   });
 
-  describe('update', () => {
+  describe('updateEmployee', () => {
     it('updates an existing employee', async () => {
-      // Setup mock response with updated data
+      
       const updatedEmployee = {
         ...mockEmployee,
         firstName: 'Updated',
@@ -269,9 +273,8 @@ describe('Employee Service', () => {
       };
       mockApi.put.mockResolvedValueOnce(updatedEmployee);
 
-      // Update data
+      
       const updateData = {
-        id: '123',
         firstName: 'Updated',
         lastName: 'Name',
         email: 'john.doe@example.com',
@@ -284,23 +287,22 @@ describe('Employee Service', () => {
         ]
       };
 
-      // Call the service
-      const result = await employeeService.update(updateData);
+      
+      const result = await employeeService.updateEmployee('123', updateData);
 
-      // Verify API was called correctly
+      
       expect(mockApi.put).toHaveBeenCalledWith('/Employees/123', updateData);
       
-      // Verify response
+      
       expect(result).toEqual(updatedEmployee);
     });
 
     it('handles errors when employee ID does not exist', async () => {
-      // Setup mock error response
+      
       mockApi.put.mockRejectedValueOnce(new Error('Employee not found'));
 
-      // Update data with non-existent ID
+      
       const updateData = {
-        id: '999',
         firstName: 'Updated',
         lastName: 'Name',
         email: 'john.doe@example.com',
@@ -311,96 +313,100 @@ describe('Employee Service', () => {
         phoneNumbers: []
       };
 
-      // Call the service and expect it to throw
-      await expect(employeeService.update(updateData))
+      
+      await expect(employeeService.updateEmployee('999', updateData))
         .rejects.toThrow('Employee not found');
       
-      // Verify API was called
+      
       expect(mockApi.put).toHaveBeenCalledWith('/Employees/999', updateData);
     });
   });
 
-  describe('delete', () => {
+  describe('deleteEmployee', () => {
     it('deletes an employee', async () => {
-      // Setup mock response
+      
       mockApi.delete.mockResolvedValueOnce(true);
 
-      // Call the service
-      await employeeService.delete('123');
+      
+      await employeeService.deleteEmployee('123');
 
-      // Verify API was called correctly
+      
       expect(mockApi.delete).toHaveBeenCalledWith('/Employees/123');
     });
 
     it('handles errors when trying to delete non-existent employee', async () => {
-      // Setup mock error response
+      
       mockApi.delete.mockRejectedValueOnce(new Error('Employee not found'));
 
-      // Call the service and expect it to throw
-      await expect(employeeService.delete('999'))
+      
+      await expect(employeeService.deleteEmployee('999'))
         .rejects.toThrow('Employee not found');
       
-      // Verify API was called
+      
       expect(mockApi.delete).toHaveBeenCalledWith('/Employees/999');
     });
   });
 
   describe('getByDepartment', () => {
     it('fetches employees by department name', async () => {
-      // Setup mock responses for employees
+      
+      mockApi.get.mockResolvedValueOnce({ name: 'TI' });
       mockApi.get.mockResolvedValueOnce([mockEmployee]);
 
-      // Call the service
+      
       const result = await employeeService.getByDepartment('TI');
 
-      // Verify API calls
+      
+      expect(mockApi.get).toHaveBeenCalledWith('/Departments/TI');
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/department/TI');
       
-      // Verify response
+      
       expect(result).toHaveLength(1);
       expect(result[0]).toEqual(mockEmployee);
     });
 
     it('returns empty array for department with no employees', async () => {
-      // Setup mock response with empty array
+      
+      mockApi.get.mockResolvedValueOnce({ name: 'Empty' });
       mockApi.get.mockResolvedValueOnce([]);
 
-      // Call the service
+      
       const result = await employeeService.getByDepartment('Empty');
 
-      // Verify API calls
+      
+      expect(mockApi.get).toHaveBeenCalledWith('/Departments/Empty');
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/department/Empty');
       
-      // Verify empty result
+      
       expect(result).toHaveLength(0);
     });
 
-    it('handles API errors when fetching by department', async () => {
-      // Setup mock error response
+    it('returns empty array when department not found', async () => {
+      
       mockApi.get.mockRejectedValueOnce(new Error('Department not found'));
 
-      // Call the service and expect it to throw
-      await expect(employeeService.getByDepartment('Invalid'))
-        .rejects.toThrow('Department not found');
       
-      // Verify API was called
-      expect(mockApi.get).toHaveBeenCalledWith('/Employees/department/Invalid');
+      const result = await employeeService.getByDepartment('Invalid');
+      
+      
+      expect(result).toEqual([]);
+      expect(mockApi.get).toHaveBeenCalledWith('/Departments/Invalid');
     });
   });
 
   describe('validateDocument', () => {
     it('validates a document number correctly', async () => {
-      // Mock the API responses
+      
       mockApi.get.mockResolvedValueOnce({ isValid: true });
       mockApi.get.mockRejectedValueOnce(new Error('Invalid document'));
       
-      // Valid document
+      
       expect(await employeeService.validateDocument('12345678909')).toBe(true);
       
-      // Invalid document (mock rejects the second call)
+      
       expect(await employeeService.validateDocument('ABCDEFGHIJK')).toBe(false);
       
-      // Verify API calls
+      
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/validate-document/12345678909');
       expect(mockApi.get).toHaveBeenCalledWith('/Employees/validate-document/ABCDEFGHIJK');
     });
diff --git a/front-next/src/app/(routes)/dashboard/page.tsx b/front-next/src/app/(routes)/dashboard/page.tsx
index 06e0558..7f63e51 100644
--- a/front-next/src/app/(routes)/dashboard/page.tsx
+++ b/front-next/src/app/(routes)/dashboard/page.tsx
@@ -1,27 +1,27 @@
 "use client";
 
-import { useState, useEffect } from "react";
-import { ArrowRight, PlusCircle } from "lucide-react";
-import { Button } from "@/components/ui/button";
-import { EmployeeRole } from "@/types/employee";
-import { useGetEmployees } from "@/services/employee/queries";
-import { useGetDepartments } from "@/services/department/queries";
+import { useEffect, useState } from "react";
+
+import { DashboardCharts } from '@/components/pages/dashboard/dashboard-chart';
 import { DashboardHeader } from '@/components/pages/dashboard/dashboard-header';
 import { StatsData, StatsOverview } from '@/components/pages/dashboard/stats-overview';
-import { DashboardCharts } from '@/components/pages/dashboard/dashboard-chart';
+import { Button } from "@/components/ui/button";
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
+import { useGetDepartments } from "@/services/department/queries";
+import { useGetEmployees } from "@/services/employee/queries";
+import { EmployeeRole } from "@/types/employee";
 import { useRouter } from "next/navigation";
 
 export default function DashboardPage() {
   const router = useRouter();
   const { data: employeesData, isLoading: isLoadingEmployees } = useGetEmployees({
     pageNumber: 1,
-    pageSize: 100, // Get a larger sample for complete stats
+    pageSize: 100, 
   });
 
   const { data: departmentsData, isLoading: isLoadingDepartments } = useGetDepartments();
 
-  // Stats calculations
+  
   const [stats, setStats] = useState<StatsData>({
     totalEmployees: 0,
     totalManagers: 0,
@@ -33,18 +33,18 @@ export default function DashboardPage() {
 
   useEffect(() => {
     if (employeesData?.items && departmentsData) {
-      // Total employees
+      
       const totalEmployees = employeesData.totalCount;
       
-      // Count managers
+      
       const managersCount = employeesData.items.filter(
         (e) => e.role === EmployeeRole.Leader || e.role === EmployeeRole.Director
       ).length;
       
-      // Total departments
+      
       const totalDepartments = departmentsData.length;
       
-      // Count new employees in the last month
+      
       const oneMonthAgo = new Date();
       oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
       
@@ -54,12 +54,12 @@ export default function DashboardPage() {
         return createdAt >= oneMonthAgo;
       }).length;
       
-      // Calculate average team size
+      
       const averageTeamSize = managersCount > 0 
         ? Math.round((totalEmployees - managersCount) / managersCount) 
         : 0;
 
-      // Calculate employee percentage
+      
       const employeePercentage = totalEmployees > 0
         ? Math.round((employeesData.items.filter(e => e.role === EmployeeRole.Employee).length / totalEmployees) * 100)
         : 0;
@@ -77,22 +77,22 @@ export default function DashboardPage() {
 
   return (
     <div className="bg-background min-h-screen">
-      {/* Header */}
+      {}
       <DashboardHeader 
         title="Dashboard Administrativo" 
         subtitle="Visão geral do sistema de gerenciamento de funcionários - AB InBev" 
       />
 
-      {/* Main Content */}
+      {}
       <div className="container px-6 py-8">
-        {/* Stats Overview */}
+        {}
         <StatsOverview 
           data={stats} 
           isLoadingEmployees={isLoadingEmployees} 
           isLoadingDepartments={isLoadingDepartments} 
         />
 
-        {/* Cards de Acesso Rápido */}
+        {}
         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
           <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300 bg-gradient-to-br from-card to-card/80 border-none">
             <CardHeader className="pb-2">
@@ -131,7 +131,7 @@ export default function DashboardPage() {
           </Card>
         </div>
 
-        {/* Dashboard Charts */}
+        {}
         <div className="mt-8">
           <h2 className="text-2xl font-bold mb-6">Análise de Dados</h2>
           <DashboardCharts />
diff --git a/front-next/src/app/(routes)/departments/[departmentId]/page.tsx b/front-next/src/app/(routes)/departments/[departmentId]/page.tsx
index e4f23f7..bd3ec54 100644
--- a/front-next/src/app/(routes)/departments/[departmentId]/page.tsx
+++ b/front-next/src/app/(routes)/departments/[departmentId]/page.tsx
@@ -45,21 +45,21 @@ export default function DepartmentDetailPage() {
   const departmentId = params.departmentId as string;
   const [searchTerm, setSearchTerm] = useState("");
   
-  // Fetch department details
+  
   const { 
     data: department, 
     isLoading: isLoadingDepartment, 
     isError: isDepartmentError 
   } = useGetDepartment(departmentId);
   
-  // Fetch employees in this department
+  
   const { 
     data: employees, 
     isLoading: isLoadingEmployees, 
     isError: isEmployeesError 
   } = useGetEmployeesByDepartment(departmentId);
   console.log('employees',employees);
-  // Filter employees based on search term
+  
   const filteredEmployees = employees?.filter(
     (employee) => 
       employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
@@ -70,11 +70,11 @@ export default function DepartmentDetailPage() {
   const isLoading = isLoadingDepartment || isLoadingEmployees;
   const isError = isDepartmentError || isEmployeesError;
   
-  // Check user permissions
+  
   const isDirector = user?.role === EmployeeRole.Director;
   const isLeaderOrDirector = user?.role === EmployeeRole.Leader || user?.role === EmployeeRole.Director;
   
-  // Get role display name
+  
   const getRoleDisplay = (role: EmployeeRole): string => {
     switch (role) {
       case EmployeeRole.Director:
@@ -88,7 +88,7 @@ export default function DepartmentDetailPage() {
     }
   };
   
-  // Get role badge variant
+  
   const getRoleBadgeVariant = (role: EmployeeRole) => {
     switch (role) {
       case EmployeeRole.Director:
diff --git a/front-next/src/app/(routes)/departments/page.tsx b/front-next/src/app/(routes)/departments/page.tsx
index 7dee92b..973fc4c 100644
--- a/front-next/src/app/(routes)/departments/page.tsx
+++ b/front-next/src/app/(routes)/departments/page.tsx
@@ -1,7 +1,7 @@
 "use client";
 
 import { useState, useEffect } from "react";
-import { Search, PlusCircle } from "lucide-react";
+import {  PlusCircle } from "lucide-react";
 
 import { useAuth } from "@/hooks/use-auth";
 import { EmployeeRole } from "@/types/employee";
@@ -23,19 +23,19 @@ export default function DepartmentsPage() {
   const { user } = useAuth();
   const [searchTerm, setSearchTerm] = useState("");
   
-  // Dialog states
+  
   const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
   const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
   const [selectedDepartment, setSelectedDepartment] = useState<Department | undefined>(undefined);
   
-  // API hooks
+  
   const { data: departments, isLoading: isLoadingDepts } = useGetDepartments();
   const { data: employees, isLoading: isLoadingEmployees } = useGetEmployees();
   const createDepartment = useCreateDepartment();
   const updateDepartment = useUpdateDepartment(selectedDepartment?.id || "");
   const deleteDepartment = useDeleteDepartment();
 
-  // Stats calculations
+  
   const [stats, setStats] = useState<DepartmentStatsData>({
     totalDepartments: 0,
     activeDepartments: 0,
@@ -45,7 +45,7 @@ export default function DepartmentsPage() {
     oldestDepartment: "",
   });
 
-  // Calculate employee counts per department
+  
   const employeeCounts: Record<string, number> = {};
   if (departments && employees) {
     departments.forEach(dept => {
@@ -53,15 +53,15 @@ export default function DepartmentsPage() {
     });
   }
 
-  // Filter departments based on search term
+  
   const filteredDepartments = departments?.filter(
     (department) => department.name.toLowerCase().includes(searchTerm.toLowerCase())
   ) || [];
 
-  // Only directors can create departments
+  
   const canManageDepartments = user?.role === EmployeeRole.Director;
 
-  // Handle department creation/update
+  
   const handleSubmitDepartment = async (data: CreateDepartmentDto | UpdateDepartmentDto) => {
     if ('id' in data) {
       await updateDepartment.mutateAsync(data);
@@ -72,7 +72,7 @@ export default function DepartmentsPage() {
     setIsCreateDialogOpen(false);
   };
 
-  // Handle department deletion
+  
   const handleDeleteDepartment = async () => {
     if (selectedDepartment) {
       await deleteDepartment.mutateAsync(selectedDepartment.id);
@@ -81,7 +81,7 @@ export default function DepartmentsPage() {
     }
   };
 
-  // Handle edit button click
+  
   const handleEditDepartment = (id: string) => {
     const department = departments?.find(d => d.id === id);
     if (department) {
@@ -90,7 +90,7 @@ export default function DepartmentsPage() {
     }
   };
 
-  // Handle delete button click
+  
   const handleDeleteClick = (id: string) => {
     const department = departments?.find(d => d.id === id);
     if (department) {
@@ -99,15 +99,15 @@ export default function DepartmentsPage() {
     }
   };
 
-  // Calculate stats
+  
   useEffect(() => {
     if (departments && employees) {
-      // Sort departments by creation date
+      
       const sortedDepartments = [...departments].sort((a, b) => 
         new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
       );
 
-      // Calculate stats
+      
       const totalDepartments = departments.length;
       const activeDepartments = departments.filter(d => d.isActive).length;
       const totalEmployees = employees.totalCount;
@@ -128,7 +128,7 @@ export default function DepartmentsPage() {
     }
   }, [departments, employees]);
 
-  // Renderização condicional para estado de carregamento
+  
   if (isLoadingDepts || isLoadingEmployees) {
     return (
       <main className="bg-background min-h-screen">
@@ -156,21 +156,21 @@ export default function DepartmentsPage() {
 
   return (
     <main className="bg-background min-h-screen">
-      {/* Header */}
+      {}
       <DepartmentHeader 
         title="Gerenciamento de Departamentos" 
         subtitle="Visualize, crie e gerencie os departamentos da empresa" 
       />
 
-      {/* Main Content */}
+      {}
       <div className="container px-6 py-8">
-        {/* Stats Overview */}
+        {}
         <DepartmentStatsOverview 
           data={stats} 
           isLoading={false} 
         />
 
-        {/* Search and Add */}
+        {}
         <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mt-8">
           <FilterBar
             searchTerm={searchTerm}
@@ -192,7 +192,7 @@ export default function DepartmentsPage() {
           )}
         </div>
 
-        {/* Departments Grid */}
+        {}
         <div className="mt-6">
           <DepartmentGrid 
             departments={filteredDepartments} 
@@ -204,7 +204,7 @@ export default function DepartmentsPage() {
         </div>
       </div>
 
-      {/* Department Create/Edit Dialog */}
+      {}
       <DepartmentDialog
         open={isCreateDialogOpen}
         onOpenChange={setIsCreateDialogOpen}
@@ -213,7 +213,7 @@ export default function DepartmentsPage() {
         isLoading={createDepartment.isPending || updateDepartment.isPending}
       />
 
-      {/* Delete Confirmation Dialog */}
+      {}
       <ConfirmDeleteDialog
         open={isDeleteDialogOpen}
         onOpenChange={setIsDeleteDialogOpen}
diff --git a/front-next/src/app/(routes)/employees/[id]/page.tsx b/front-next/src/app/(routes)/employees/[id]/page.tsx
index e083cb5..0945274 100644
--- a/front-next/src/app/(routes)/employees/[id]/page.tsx
+++ b/front-next/src/app/(routes)/employees/[id]/page.tsx
@@ -1,65 +1,63 @@
   "use client";
 
-  import { useState, useEffect } from "react";
-  import { useRouter } from "next/navigation";
   import { zodResolver } from "@hookform/resolvers/zod";
-  import { useForm } from "react-hook-form";
-  import { CalendarIcon, ArrowLeft, Save, Trash2, UserCheck } from "lucide-react";
-  import { format } from "date-fns";
-  import { ptBR } from "date-fns/locale";
-  import * as z from "zod";
+import { format } from "date-fns";
+import { ptBR } from "date-fns/locale";
+import { ArrowLeft, CalendarIcon, UserCheck } from "lucide-react";
+import { useRouter } from "next/navigation";
+import { useEffect, useState } from "react";
+import { useForm } from "react-hook-form";
+import * as z from "zod";
 
   import { useAuth } from "@/hooks/use-auth";
-  import { Employee, EmployeeRole, PhoneType } from "@/types/employee";
-  import { useGetEmployee, useUpdateEmployee, useDeleteEmployee } from "@/services/employee/queries";
-  import { useGetDepartments } from "@/services/department/queries";
-  import { useGetManagers } from "@/services/employee/queries";
+import { useGetDepartments } from "@/services/department/queries";
+import { useDeleteEmployee, useGetEmployee, useGetManagers, useUpdateEmployee } from "@/services/employee/queries";
+import { EmployeeRole, PhoneType } from "@/types/employee";
 
-  import {
-    Card,
-    CardContent,
-    CardDescription,
-    CardFooter,
-    CardHeader,
-    CardTitle,
-  } from "@/components/ui/card";
-  import {
-    Form,
-    FormControl,
-    FormDescription,
-    FormField,
-    FormItem,
-    FormLabel,
-    FormMessage,
-  } from "@/components/ui/form";
-  import { Input } from "@/components/ui/input";
-  import { Button } from "@/components/ui/button";
-  import {
-    Select,
-    SelectContent,
-    SelectItem,
-    SelectTrigger,
-    SelectValue,
-  } from "@/components/ui/select";
-  import {
-    Dialog,
-    DialogContent,
-    DialogDescription,
-    DialogFooter,
-    DialogHeader,
-    DialogTitle,
-  } from "@/components/ui/dialog";
-  import {
-    Popover,
-    PopoverContent,
-    PopoverTrigger,
-  } from "@/components/ui/popover";
-  import { Calendar } from "@/components/ui/calendar";
   import { Badge } from "@/components/ui/badge";
-  import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
-  import { toast } from "sonner";
+import { Button } from "@/components/ui/button";
+import { Calendar } from "@/components/ui/calendar";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardHeader,
+  CardTitle
+} from "@/components/ui/card";
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogFooter,
+  DialogHeader,
+  DialogTitle,
+} from "@/components/ui/dialog";
+import {
+  Form,
+  FormControl,
+  FormDescription,
+  FormField,
+  FormItem,
+  FormLabel,
+  FormMessage,
+} from "@/components/ui/form";
+import { Input } from "@/components/ui/input";
+import {
+  Popover,
+  PopoverContent,
+  PopoverTrigger,
+} from "@/components/ui/popover";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
+import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
+import { toast } from "sonner";
 
-  // Schema de validação do formulário
+  
   const employeeFormSchema = z.object({
     firstName: z.string().min(2, "Nome deve ter pelo menos 2 caracteres"),
     lastName: z.string().min(2, "Sobrenome deve ter pelo menos 2 caracteres"),
@@ -100,9 +98,9 @@
     const [activeTab, setActiveTab] = useState("profile");
     const [showDeleteDialog, setShowDeleteDialog] = useState(false);
     
-    // Verifica se o modo de edição deve ser ativado automaticamente
+    
     useEffect(() => {
-      // Em ambiente cliente, podemos acessar a URL
+      
       if (typeof window !== "undefined") {
         const params = new URLSearchParams(window.location.search);
         const editMode = params.get("edit") === "true";
@@ -113,22 +111,22 @@
       }
     }, []);
     
-    // Fetch data from API
+    
     const { data: employee, isLoading, isError } = useGetEmployee(params.id);
     const { data: departments } = useGetDepartments();
     const { data: managers } = useGetManagers();
     
-    // Mutations
+    
     const updateEmployee = useUpdateEmployee();
     const deleteEmployee = useDeleteEmployee();
     
-    // Access control
+    
     const isDirector = user?.role === EmployeeRole.Director;
     const isLeaderOrDirector = user?.role === EmployeeRole.Leader || user?.role === EmployeeRole.Director;
     const canEdit = isLeaderOrDirector;
     const canDelete = isDirector;
     console.log('user', user);
-    // Form setup
+    
     const employeeForm = useForm<EmployeeFormValues>({
       resolver: zodResolver(employeeFormSchema),
       defaultValues: {
@@ -144,7 +142,7 @@
       }
     });
     
-    // Set form values when employee data is loaded
+    
     useEffect(() => {
       if (employee) {
         employeeForm.reset({
@@ -161,7 +159,7 @@
       }
     }, [employee, employeeForm]);
     
-    // Form submission
+    
     const onSubmit = async (data: EmployeeFormValues) => {
       if (!employee || !employee.id) return;
       
@@ -191,7 +189,7 @@
       }
     };
     
-    // Handle delete confirmation
+    
     const handleDelete = async () => {
       if (!employee || !employee.id) return;
       
@@ -205,7 +203,7 @@
       }
     };
     
-    // Get role display name
+    
     const getRoleDisplay = (role: EmployeeRole): string => {
       switch (role) {
         case EmployeeRole.Director:
@@ -219,7 +217,7 @@
       }
     };
     
-    // Get role badge variant
+    
     const getRoleBadgeVariant = (role: EmployeeRole) => {
       switch (role) {
         case EmployeeRole.Director:
@@ -233,7 +231,7 @@
       }
     };
     
-    // Get phone type label
+    
     const getPhoneTypeLabel = (type: PhoneType): string => {
       switch (type) {
         case PhoneType.Mobile:
@@ -247,7 +245,7 @@
       }
     };
     
-    // Loading state
+    
     if (isLoading) {
       return (
         <div className="container mx-auto py-6">
@@ -264,7 +262,7 @@
       );
     }
     
-    // Error state
+    
     if (isError || !employee) {
       return (
         <div className="container mx-auto py-6">
@@ -418,7 +416,7 @@
                   <Form {...employeeForm}>
                     <form onSubmit={employeeForm.handleSubmit(onSubmit)} className="space-y-6">
                       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
-                        {/* First Name */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="firstName"
@@ -433,7 +431,7 @@
                           )}
                         />
                         
-                        {/* Last Name */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="lastName"
@@ -448,7 +446,7 @@
                           )}
                         />
                         
-                        {/* Email */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="email"
@@ -463,7 +461,7 @@
                           )}
                         />
                         
-                        {/* Document Number */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="documentNumber"
@@ -478,7 +476,7 @@
                           )}
                         />
                         
-                        {/* Birth Date */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="birthDate"
@@ -521,7 +519,7 @@
                           )}
                         />
                         
-                        {/* Role */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="role"
@@ -552,7 +550,7 @@
                           )}
                         />
                         
-                        {/* Department */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="department"
@@ -581,7 +579,7 @@
                           )}
                         />
                         
-                        {/* Manager */}
+                        {}
                         <FormField
                           control={employeeForm.control}
                           name="managerId"
@@ -612,7 +610,7 @@
                         />
                       </div>
                       
-                      {/* Phone Numbers */}
+                      {}
                       <div className="space-y-2">
                         <FormLabel>Telefones</FormLabel>
                         {employeeForm.watch("phoneNumbers")?.map((phone, index) => (
@@ -757,7 +755,7 @@
           </TabsContent>
         </Tabs>
         
-        {/* Delete Confirmation Dialog */}
+        {}
         <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
           <DialogContent>
             <DialogHeader>
diff --git a/front-next/src/app/(routes)/page.tsx b/front-next/src/app/(routes)/page.tsx
index 8463e40..64ba1c7 100644
--- a/front-next/src/app/(routes)/page.tsx
+++ b/front-next/src/app/(routes)/page.tsx
@@ -1,76 +1,6 @@
-"use client";
-
-import { useEffect } from "react";
-import Link from "next/link";
-import { useRouter } from "next/navigation";
-import { useAuth } from "@/hooks/use-auth";
-import { Button } from "@/components/ui/button";
-import { Users, LayoutDashboard, Building } from "lucide-react";
+// Página inicial da aplicação - Componente Servidor
+import HomePageClient from './home-page-client';
 
 export default function HomePage() {
-  const { user, isLoading } = useAuth();
-  const router = useRouter();
-
-  useEffect(() => {
-    // Se não estiver autenticado, redireciona para o login
-    if (!isLoading && !user) {
-      router.push("/login");
-    }
-  }, [user, isLoading, router]);
-
-  if (isLoading) {
-    return <div className="min-h-screen flex items-center justify-center">Carregando...</div>;
-  }
-
-  return (
-    <div className="container py-12">
-      <div className="max-w-3xl mx-auto">
-        <h1 className="text-3xl font-bold mb-3">Bem-vindo ao Sistema de Gerenciamento de Funcionários</h1>
-        <p className="text-lg text-muted-foreground mb-6">
-          Use as opções abaixo para gerenciar os funcionários da empresa.
-        </p>
-
-        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
-          <div className="flex flex-col gap-2 p-6 bg-card rounded-lg border shadow-sm">
-            <LayoutDashboard className="h-10 w-10 text-primary" />
-            <h3 className="font-medium text-lg">Dashboard</h3>
-            <p className="text-sm text-muted-foreground">
-              Visualize os dados gerais e estatísticas do sistema.
-            </p>
-            <div className="mt-auto pt-4">
-              <Link href="/dashboard" className="w-full">
-                <Button className="w-full">Ver Dashboard</Button>
-              </Link>
-            </div>
-          </div>
-          
-          <div className="flex flex-col gap-2 p-6 bg-card rounded-lg border shadow-sm">
-            <Users className="h-10 w-10 text-primary" />
-            <h3 className="font-medium text-lg">Gerenciar Funcionários</h3>
-            <p className="text-sm text-muted-foreground">
-              Adicione, edite ou remova funcionários do sistema.
-            </p>
-            <div className="mt-auto pt-4">
-              <Link href="/employees/create" className="w-full">
-                <Button className="w-full">Cadastrar Funcionário</Button>
-              </Link>
-            </div>
-          </div>
-          
-          <div className="flex flex-col gap-2 p-6 bg-card rounded-lg border shadow-sm">
-            <Building className="h-10 w-10 text-primary" />
-            <h3 className="font-medium text-lg">Departamentos</h3>
-            <p className="text-sm text-muted-foreground">
-              Gerencie os departamentos da empresa.
-            </p>
-            <div className="mt-auto pt-4">
-              <Link href="/departments" className="w-full">
-                <Button className="w-full" variant="outline">Gerenciar Departamentos</Button>
-              </Link>
-            </div>
-          </div>
-        </div>
-      </div>
-    </div>
-  );
-}
\ No newline at end of file
+  return <HomePageClient />;
+}
diff --git a/front-next/src/app/(routes)/profile/page.tsx b/front-next/src/app/(routes)/profile/page.tsx
index 9da7beb..0f51382 100644
--- a/front-next/src/app/(routes)/profile/page.tsx
+++ b/front-next/src/app/(routes)/profile/page.tsx
@@ -10,11 +10,13 @@ import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
 import { PhoneType } from "@/types/employee";
 
 import { ProfileHeader } from "@/components/pages/profile/profile-header";
-import { PersonalInfoForm, PersonalInfoFormValues } from "@/components/pages/profile/personal-info-form";
-import { PasswordForm, PasswordFormValues } from "@/components/pages/profile/password-form";
+import { PersonalInfoForm } from "@/components/pages/profile/personal-info-form";
+import { PasswordForm } from "@/components/pages/profile/password-form";
+import { PersonalInfoFormValues } from '@/schemas/employee';
+import { PasswordFormValues } from '@/schemas/auth';
 
 export default function ProfilePage() {
-  // Usar um estado para controlar a fase de hidratação
+  
   const [isHydrated, setIsHydrated] = useState(false);
   const { data: user, isLoading: isLoadingUser, isError: isUserError } = useCurrentUser();
   const { data: detailedUser, isLoading: isLoadingDetails, isError: isDetailsError } = useDetailedUserInfo();
@@ -23,7 +25,7 @@ export default function ProfilePage() {
   const isLoading = isLoadingUser || isLoadingDetails;
   const isError = isUserError || isDetailsError;
   
-  // Marcar que a página foi hidratada após a renderização inicial
+  
   useEffect(() => {
     setIsHydrated(true);
   }, []);
@@ -32,7 +34,7 @@ export default function ProfilePage() {
   const updatePassword = useUpdateEmployeePassword();
 
   const onPersonalInfoSubmit = async (data: PersonalInfoFormValues) => {
-    // Normalizar dados do usuário para ter um formato consistente
+    
     const normalizedUser = normalizeUserData(detailedUser || user);
     
     if (!normalizedUser || !normalizedUser.id) {
@@ -41,30 +43,30 @@ export default function ProfilePage() {
     }
 
     try {
-      // Processamento seguro dos telefones com validação adicional
+      
       const processedPhoneNumbers = (data.phoneNumbers || [])
-        .filter(phone => phone && typeof phone === 'object') // Garantir que sejam objetos válidos
+        .filter(phone => phone && typeof phone === 'object') 
         .map(phone => {
-          // Se o ID for vazio, nulo ou undefined, omitir completamente a propriedade id
-          // Em vez de enviar undefined, que pode causar problemas de serialização
+          
+          
           const phoneObj: any = {
             number: (phone.number || "").trim(),
             type: Number(phone.type) || PhoneType.Mobile
           };
           
-          // Adicionar ID apenas se for uma string válida não vazia
+          
           if (phone.id && typeof phone.id === 'string' && phone.id.trim() !== '') {
             phoneObj.id = phone.id.trim();
           }
           
           return phoneObj;
         })
-        .filter(phone => phone.number.length >= 8); // Filtrar telefones com número válido
+        .filter(phone => phone.number.length >= 8); 
 
-      // Tratar datas de forma segura
+      
       const birthDateISOString = toISODateString(data.birthDate);
       
-      // Dados validados prontos para envio
+      
       await updateProfile.mutateAsync({
         id: normalizedUser.id,
         data: {
@@ -84,7 +86,7 @@ export default function ProfilePage() {
   };
 
   const onPasswordSubmit = async (data: PasswordFormValues) => {
-    // Normalizar dados do usuário para ter um formato consistente
+    
     const normalizedUser = normalizeUserData(detailedUser || user);
     
     if (!normalizedUser || !normalizedUser.id) {
@@ -93,7 +95,7 @@ export default function ProfilePage() {
     }
 
     try {
-      // Validar dados da senha antes de enviar
+      
       if (data.newPassword !== data.confirmNewPassword) {
         toast.error("As senhas não coincidem.");
         return;
@@ -133,7 +135,7 @@ export default function ProfilePage() {
     );
   }
 
-  // Renderizar um esqueleto até que a hidratação esteja completa
+  
   if (!isHydrated) {
     return (
       <div className="bg-background min-h-screen">
@@ -157,10 +159,10 @@ export default function ProfilePage() {
 
   return (
     <div className="bg-background min-h-screen" suppressHydrationWarning>
-      {/* Profile Header */}
+      {}
       <ProfileHeader user={detailedUser || user} isLoading={isLoading} />
 
-      {/* Main Content */}
+      {}
       <div className="container px-6 py-8">
         <Tabs
           defaultValue="profile"
diff --git a/front-next/src/app/auth/login/login-content.tsx b/front-next/src/app/auth/login/login-content.tsx
index 509241c..5f35068 100644
--- a/front-next/src/app/auth/login/login-content.tsx
+++ b/front-next/src/app/auth/login/login-content.tsx
@@ -14,22 +14,22 @@ export default function LoginContent() {
   const callbackUrl = searchParams.get("callbackUrl") || "/";
   const [formReady, setFormReady] = useState(false);
 
-  // Otimização para renderização mais rápida
+  
   useEffect(() => {
-    // Marcar formulário como pronto após a primeira renderização
+    
     if (!formReady) {
       setFormReady(true);
     }
     
-    // Se já estiver autenticado, redireciona para a página inicial ou callback
+    
     if (!isLoading && user) {
-      // Forçar redirecionamento para dashboard quando já estiver autenticado
+      
       setTimeout(() => {
         router.push(callbackUrl === "/" ? "/dashboard" : callbackUrl);
       }, 300);
     }
 
-    // Exibe mensagem de erro se houver
+    
     if (error) {
       toast.error(error);
     }
diff --git a/front-next/src/app/auth/login/page.tsx b/front-next/src/app/auth/login/page.tsx
index d3ed01f..6163fbf 100644
--- a/front-next/src/app/auth/login/page.tsx
+++ b/front-next/src/app/auth/login/page.tsx
@@ -4,7 +4,7 @@ import React, { Suspense } from "react";
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
 import LoginContent from "./login-content";
 
-// Precisamos manter como client component por causa do useSearchParams no LoginContent
+
 export default function LoginPage() {
   return (
     <div className="flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-900 p-4">
diff --git a/front-next/src/app/auth/register/register-content.tsx b/front-next/src/app/auth/register/register-content.tsx
index c1e385e..b18dba8 100644
--- a/front-next/src/app/auth/register/register-content.tsx
+++ b/front-next/src/app/auth/register/register-content.tsx
@@ -12,7 +12,7 @@ export default function RegisterContent() {
   const callbackUrl = searchParams.get("callbackUrl") || "/";
 
   useEffect(() => {
-    // Exibe mensagem de erro se houver
+    
     if (error) {
       toast.error(error);
     }
diff --git a/front-next/src/app/globals.css b/front-next/src/app/globals.css
index 6e0eb3c..dadf24a 100644
--- a/front-next/src/app/globals.css
+++ b/front-next/src/app/globals.css
@@ -80,37 +80,3 @@
   }
 }
 
-/* @font-face {
-  font-family: 'Poppins';
-  font-style: normal;
-  font-weight: 300;
-  src: url('/fonts/Poppins-Light.woff2') format('woff2');
-}
-
-@font-face {
-  font-family: 'Poppins';
-  font-style: normal;
-  font-weight: 400;
-  src: url('/fonts/Poppins-Regular.woff2') format('woff2');
-}
-
-@font-face {
-  font-family: 'Poppins';
-  font-style: normal;
-  font-weight: 500;
-  src: url('/fonts/Poppins-Medium.woff2') format('woff2');
-}
-
-@font-face {
-  font-family: 'Poppins';
-  font-style: normal;
-  font-weight: 600;
-  src: url('/fonts/Poppins-SemiBold.woff2') format('woff2');
-}
-
-@font-face {
-  font-family: 'Poppins';
-  font-style: normal;
-  font-weight: 700;
-  src: url('/fonts/Poppins-Bold.woff2') format('woff2');
-} */
\ No newline at end of file
diff --git a/front-next/src/app/layout.tsx b/front-next/src/app/layout.tsx
index a548be1..0a8918c 100644
--- a/front-next/src/app/layout.tsx
+++ b/front-next/src/app/layout.tsx
@@ -36,7 +36,7 @@ export default function RootLayout({
         <ReduxProvider>
           <QueryProvider>
             <AuthProvider>
-              {/* Componente para sincronizar o token entre localStorage e cookies */}
+              {}
               <TokenSync>
                 <div className="relative flex min-h-screen flex-col">
                   <Header />
diff --git a/front-next/src/app/page.tsx b/front-next/src/app/page.tsx
index c6d826d..1af428c 100644
--- a/front-next/src/app/page.tsx
+++ b/front-next/src/app/page.tsx
@@ -1,5 +1,5 @@
 import { redirect } from "next/navigation";
 
 export default function Home() {
-  redirect("/dashboard");
+  redirect("/");
 }
\ No newline at end of file
diff --git a/front-next/src/components/auth/token-sync-client.tsx b/front-next/src/components/auth/token-sync-client.tsx
index dc033c5..36bdac7 100644
--- a/front-next/src/components/auth/token-sync-client.tsx
+++ b/front-next/src/components/auth/token-sync-client.tsx
@@ -3,10 +3,7 @@
 import { useEffect } from 'react';
 import Cookies from 'js-cookie';
 
-/**
- * Componente do lado do cliente para sincronizar o token JWT entre localStorage e cookies.
- * Este componente não renderiza nada visualmente, apenas executa a lógica de sincronização.
- */
+
 export function TokenSyncClient(): React.ReactNode {
   useEffect(() => {
     const syncTokenToCookie = () => {
@@ -17,7 +14,7 @@ export function TokenSyncClient(): React.ReactNode {
         
         if (token) {
           Cookies.set('auth_token', token, {
-            expires: 1, // 1 dia
+            expires: 1, 
             path: '/',
             secure: process.env.NODE_ENV === 'production',
             sameSite: 'lax'
@@ -33,11 +30,11 @@ export function TokenSyncClient(): React.ReactNode {
       }
     };
 
-    // Sincroniza o token imediatamente
+    
     const syncResult = syncTokenToCookie();
     console.log('Token sincronizado do localStorage para cookie:', syncResult);
 
-    // Configura um listener para mudanças no localStorage
+    
     const handleStorageChange = (event: StorageEvent) => {
       if (event.key === 'auth_token') {
         const syncResult = syncTokenToCookie();
@@ -45,20 +42,20 @@ export function TokenSyncClient(): React.ReactNode {
       }
     };
 
-    // Verificar periodicamente (a cada 30 segundos) se o token ainda está válido
+    
     const intervalId = setInterval(() => {
       syncTokenToCookie();
-    }, 30000); // 30 segundos
+    }, 30000); 
 
     window.addEventListener('storage', handleStorageChange);
     
-    // Cleanup
+    
     return () => {
       window.removeEventListener('storage', handleStorageChange);
       clearInterval(intervalId);
     };
   }, []);
 
-  // Este componente não renderiza nada visualmente
+  
   return null;
 }
diff --git a/front-next/src/components/features/authentication/login-form.tsx b/front-next/src/components/features/authentication/login-form.tsx
index 87345f9..107e524 100644
--- a/front-next/src/components/features/authentication/login-form.tsx
+++ b/front-next/src/components/features/authentication/login-form.tsx
@@ -16,7 +16,7 @@ export function LoginForm({ onSuccess, redirectUrl = '/dashboard' }: ILoginFormP
   const [error, setError] = useState<string | null>(null);
   const { login, isLoading } = useAuth();
   
-  // Limpar erro quando usuário começa a digitar
+  
   const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     setEmail(e.target.value);
     if (error) setError(null);
@@ -31,7 +31,7 @@ export function LoginForm({ onSuccess, redirectUrl = '/dashboard' }: ILoginFormP
     e.preventDefault();
     setError(null);
     
-    // Validate form fields
+    
     if (!email || !password) {
       setError('Por favor, preencha todos os campos');
       return;
@@ -45,6 +45,7 @@ export function LoginForm({ onSuccess, redirectUrl = '/dashboard' }: ILoginFormP
         window.location.href = redirectUrl;
       }
     } catch (err) {
+      console.error("🚀 ~ file: login-form.tsx:48 ~ handleSubmit ~ err:", err)
       setError('Credenciais inválidas. Por favor, tente novamente.');
     }
   };
diff --git a/front-next/src/components/layout/header.tsx b/front-next/src/components/layout/header.tsx
index 615eb65..fec2cf1 100644
--- a/front-next/src/components/layout/header.tsx
+++ b/front-next/src/components/layout/header.tsx
@@ -1,23 +1,10 @@
 "use client";
-
-import React from "react";
 import Link from "next/link";
-import { usePathname, useRouter } from "next/navigation";
-import { 
-  User, 
-  LogOut, 
-  Menu, 
-  LayoutDashboard,
-  Users,
-  Settings,
-  Building
-} from "lucide-react";
-import { Button } from "@/components/ui/button";
+import { usePathname } from "next/navigation";
+import { ThemeCustomizer } from "@/components/shared/theme/theme-customizer";
+import { ThemeToggle } from "@/components/shared/theme/theme-toggle";
 import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
-import { useAuth } from "@/hooks/use-auth";
-import { useAppDispatch, useAppSelector } from "@/redux/hooks";
-import { setMobileMenuOpen } from "@/redux/features/ui/uiSlice";
-import type { RootState } from "@/redux/store";
+import { Button } from "@/components/ui/button";
 import {
   DropdownMenu,
   DropdownMenuContent,
@@ -26,14 +13,13 @@ import {
   DropdownMenuSeparator,
   DropdownMenuTrigger,
 } from "@/components/ui/dropdown-menu";
-import {
-  Sheet,
-  SheetContent,
-  SheetTrigger,
-} from "@/components/ui/sheet";
-import { useLogout } from '@/services/auth/queries';
-import { ThemeToggle } from "@/components/shared/theme/theme-toggle";
-import { ThemeCustomizer } from "@/components/shared/theme/theme-customizer";
+import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
+import { useAuth } from "@/hooks/use-auth";
+import { setMobileMenuOpen } from "@/redux/features/ui/uiSlice";
+import { useAppDispatch, useAppSelector } from "@/redux/hooks";
+import type { RootState } from "@/redux/store";
+import { useLogout } from "@/services/auth/queries";
+import { Building, LayoutDashboard, LogOut, Menu, User, Users } from "lucide-react";
 
 type NavItem = {
   name: string;
@@ -47,14 +33,13 @@ export function Header() {
   const dispatch = useAppDispatch();
   const isMobileMenuOpen = useAppSelector((state: RootState) => state.ui.isMobileMenuOpen);
   const logout = useLogout();
-  
+
   const setIsMobileMenuOpen = (isOpen: boolean) => {
     dispatch(setMobileMenuOpen(isOpen));
   };
-  
-  // Se não houver usuário logado, não renderiza o header
+
   if (!user) return null;
-  
+
   const navItems: NavItem[] = [
     {
       name: "Dashboard",
@@ -82,20 +67,21 @@ export function Header() {
     <header className="sticky top-0 z-50 w-full border-b bg-background">
       <div className="px-6 mx-auto max-w-7xl">
         <div className="flex h-16 items-center justify-between">
-          <Link href="/" className="flex items-center">
-            <div className="font-bold text-2xl text-primary">
-              AB InBev
-            </div>
+          <Link
+            href="/"
+            className="flex items-center"
+          >
+            <div className="font-bold text-2xl text-primary">AB InBev</div>
           </Link>
 
           <nav className="hidden md:flex items-center gap-1">
-            {navItems.map((item) => (
-              <Link 
-                key={item.name} 
+            {navItems.map(item => (
+              <Link
+                key={item.name}
                 href={item.href}
                 className={`flex items-center px-4 py-2 mx-1 text-sm rounded-full ${
-                  isActiveLink(item.href) 
-                    ? "text-primary font-medium" 
+                  isActiveLink(item.href)
+                    ? "text-primary font-medium"
                     : "text-muted-foreground hover:text-foreground hover:bg-secondary"
                 }`}
               >
@@ -107,19 +93,28 @@ export function Header() {
           <div className="flex items-center gap-2">
             <ThemeToggle />
             <ThemeCustomizer />
-            
+
             <DropdownMenu>
               <DropdownMenuTrigger asChild>
-                <Button variant="ghost" className="relative h-9 w-9 rounded-full">
+                <Button
+                  variant="ghost"
+                  className="relative h-9 w-9 rounded-full"
+                >
                   <Avatar className="h-8 w-8 border">
-                  <AvatarImage src="https://avatar.iran.liara.run/public" alt={user.name} />
+                    <AvatarImage
+                      src="https://avatar.iran.liara.run/public"
+                      alt={user.name}
+                    />
                     <AvatarFallback className="bg-primary text-primary-foreground">
                       {user.name.substring(0, 2).toUpperCase()}
                     </AvatarFallback>
                   </Avatar>
                 </Button>
               </DropdownMenuTrigger>
-              <DropdownMenuContent className="rounded-xl" align="end">
+              <DropdownMenuContent
+                className="rounded-xl"
+                align="end"
+              >
                 <DropdownMenuLabel>
                   <div className="flex flex-col">
                     <p className="text-sm font-medium">{user.name}</p>
@@ -128,13 +123,16 @@ export function Header() {
                 </DropdownMenuLabel>
                 <DropdownMenuSeparator />
                 <DropdownMenuItem asChild>
-                  <Link href="/profile" className="cursor-pointer">
+                  <Link
+                    href="/profile"
+                    className="cursor-pointer"
+                  >
                     <User className="mr-2 h-4 w-4" />
                     Perfil
                   </Link>
                 </DropdownMenuItem>
                 <DropdownMenuSeparator />
-                <DropdownMenuItem 
+                <DropdownMenuItem
                   className="text-destructive focus:text-destructive cursor-pointer"
                   onClick={() => logout()}
                 >
@@ -144,28 +142,36 @@ export function Header() {
               </DropdownMenuContent>
             </DropdownMenu>
 
-            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
+            <Sheet
+              open={isMobileMenuOpen}
+              onOpenChange={setIsMobileMenuOpen}
+            >
               <SheetTrigger asChild>
-                <Button variant="ghost" size="icon" className="md:hidden">
+                <Button
+                  variant="ghost"
+                  size="icon"
+                  className="md:hidden"
+                >
                   <Menu className="h-6 w-6" />
                   <span className="sr-only">Abrir menu</span>
                 </Button>
               </SheetTrigger>
-              <SheetContent side="right" className="w-[280px] p-0">
+              <SheetContent
+                side="right"
+                className="w-[280px] p-0"
+              >
                 <div className="p-6">
-                  <span className="font-bold text-2xl text-primary">
-                    AB InBev
-                  </span>
+                  <span className="font-bold text-2xl text-primary">AB InBev</span>
                 </div>
                 <div className="flex flex-col space-y-1 px-4">
-                  {navItems.map((item) => (
+                  {navItems.map(item => (
                     <Link
                       key={item.name}
                       href={item.href}
                       onClick={() => setIsMobileMenuOpen(false)}
                       className={`flex items-center gap-3 p-2 rounded-lg ${
-                        isActiveLink(item.href) 
-                          ? "text-primary font-medium" 
+                        isActiveLink(item.href)
+                          ? "text-primary font-medium"
                           : "text-muted-foreground hover:text-foreground"
                       }`}
                     >
@@ -174,11 +180,14 @@ export function Header() {
                     </Link>
                   ))}
                 </div>
-                
+
                 <div className="border-t mt-4 pt-4 px-4">
                   <div className="flex items-center gap-3 p-2">
                     <Avatar className="h-8 w-8">
-                      <AvatarImage src="https://avatar.iran.liara.run/public" alt={user.name} />
+                      <AvatarImage
+                        src="https://avatar.iran.liara.run/public"
+                        alt={user.name}
+                      />
                       <AvatarFallback className="bg-primary text-primary-foreground">
                         {user.name.substring(0, 2).toUpperCase()}
                       </AvatarFallback>
@@ -190,8 +199,8 @@ export function Header() {
                   </div>
                 </div>
                 <div className="px-4 mt-2">
-                  <Button 
-                    variant="ghost" 
+                  <Button
+                    variant="ghost"
                     className="w-full justify-start text-destructive"
                     onClick={() => {
                       logout();
@@ -209,4 +218,4 @@ export function Header() {
       </div>
     </header>
   );
-}
\ No newline at end of file
+}
diff --git a/front-next/src/components/pages/auth/register-form.tsx b/front-next/src/components/pages/auth/register-form.tsx
index 4a66f06..48ec0ae 100644
--- a/front-next/src/components/pages/auth/register-form.tsx
+++ b/front-next/src/components/pages/auth/register-form.tsx
@@ -6,7 +6,7 @@ import { useForm } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
 import { toast } from "sonner";
 import Link from "next/link";
-import { Loader2, Mail, Lock, User, Phone, Building, UserCog, AlertTriangle } from "lucide-react";
+import { Loader2, Mail, Lock, User, Building, UserCog, AlertTriangle } from "lucide-react";
 
 import { useAuth } from "@/hooks/use-auth";
 import { EmployeeRole, PhoneType } from "@/types/employee";
@@ -30,7 +30,7 @@ import {
   SelectValue
 } from "@/components/ui/select";
 import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
-import { RegisterFormValues, registerSchema } from '@/lib/validations/register';
+import { RegisterFormValues, registerSchema } from '@/schemas/register';
 import { PhoneFieldArray } from "@/components/shared/forms/phone-field";
 
 export function RegisterForm() {
@@ -70,12 +70,12 @@ export function RegisterForm() {
         throw new Error("Você não pode criar funcionários com este nível de acesso");
       }
 
-      // Garantir que phoneNumbers tenha todos os campos obrigatórios preenchidos
+      
       const validPhoneNumbers = values.phoneNumbers
-        .filter(phone => phone.number && phone.type) // Filtra apenas os telefones com number e type preenchidos
+        .filter(phone => phone.number && phone.type) 
         .map(phone => ({
-          number: phone.number as string, // Cast para string não-opcional
-          type: phone.type as PhoneType   // Cast para PhoneType não-opcional
+          number: phone.number as string, 
+          type: phone.type as PhoneType   
         }));
 
       if (validPhoneNumbers.length === 0) {
diff --git a/front-next/src/components/pages/dashboard/dashboard-chart.tsx b/front-next/src/components/pages/dashboard/dashboard-chart.tsx
index cb5d684..1bf3a90 100644
--- a/front-next/src/components/pages/dashboard/dashboard-chart.tsx
+++ b/front-next/src/components/pages/dashboard/dashboard-chart.tsx
@@ -1,9 +1,8 @@
-import React from "react";
-import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
-import { RecentEmployees } from "@/components/pages/dashboard/recent-employees";
 import { DepartmentChart } from "@/components/pages/dashboard/department-chart";
+import { RecentEmployees } from "@/components/pages/dashboard/recent-employees";
 import { RoleDistribution } from "@/components/pages/dashboard/role-distribution";
-import { TopManagers } from "@/components/pages/dashboard/top-managers";
+import { Card, CardContent, CardHeader } from "@/components/ui/card";
+
 
 export function DashboardCharts() {
   return (
diff --git a/front-next/src/components/pages/dashboard/department-chart.tsx b/front-next/src/components/pages/dashboard/department-chart.tsx
index b7f5782..15cafcd 100644
--- a/front-next/src/components/pages/dashboard/department-chart.tsx
+++ b/front-next/src/components/pages/dashboard/department-chart.tsx
@@ -13,10 +13,10 @@ interface DepartmentCount {
 export function DepartmentChart() {
   const { data, isLoading, isError } = useGetEmployees({
     pageNumber: 1,
-    pageSize: 100, // Get a larger sample for accurate department counts
+    pageSize: 100, 
   });
 
-  // Count employees by department and sort by count
+  
   const departmentCounts: DepartmentCount[] = [];
   
   if (data?.items) {
@@ -29,7 +29,7 @@ export function DepartmentChart() {
       return acc;
     }, {} as Record<string, number>);
 
-    // Colors for departments
+    
     const colors = [
       "bg-blue-500",
       "bg-green-500",
@@ -51,11 +51,11 @@ export function DepartmentChart() {
       colorIndex++;
     });
 
-    // Sort by count (highest first)
+    
     departmentCounts.sort((a, b) => b.count - a.count);
   }
 
-  // Calculate maximum count for percentage calculations
+  
   const maxCount = departmentCounts.length > 0 
     ? Math.max(...departmentCounts.map(dept => dept.count))
     : 0;
diff --git a/front-next/src/components/pages/dashboard/recent-employees.tsx b/front-next/src/components/pages/dashboard/recent-employees.tsx
index 5455a1e..14eb7d7 100644
--- a/front-next/src/components/pages/dashboard/recent-employees.tsx
+++ b/front-next/src/components/pages/dashboard/recent-employees.tsx
@@ -13,7 +13,7 @@ export function RecentEmployees() {
     pageSize: 5,
   });
 
-  // Get the role as string
+  
   const getRoleDisplay = (role: EmployeeRole): string => {
     switch (role) {
       case EmployeeRole.Director:
diff --git a/front-next/src/components/pages/dashboard/role-distribution.tsx b/front-next/src/components/pages/dashboard/role-distribution.tsx
index f3cf363..b77c01c 100644
--- a/front-next/src/components/pages/dashboard/role-distribution.tsx
+++ b/front-next/src/components/pages/dashboard/role-distribution.tsx
@@ -7,29 +7,29 @@ import { EmployeeRole } from "@/types/employee";
 export function RoleDistribution() {
   const { data, isLoading, isError } = useGetEmployees({
     pageNumber: 1,
-    pageSize: 100, // Get a larger sample for accurate role distribution
+    pageSize: 100, 
   });
 
   const getRoleData = () => {
     if (!data?.items?.length) return [];
 
-    // Initialize counters
+    
     const roleCount = {
       [EmployeeRole.Director]: 0,
       [EmployeeRole.Leader]: 0,
       [EmployeeRole.Employee]: 0,
     };
 
-    // Count by role
+    
     data.items.forEach(employee => {
-      // Verificar se o role é um valor válido do enum EmployeeRole
+      
       const role = employee.role as EmployeeRole;
       if (role in roleCount) {
         roleCount[role]++;
       }
     });
 
-    // Create the data array
+    
     return [
       {
         role: "Diretores",
@@ -70,17 +70,17 @@ export function RoleDistribution() {
           <div className="p-4 text-center text-red-500">Erro ao carregar dados</div>
         ) : (
           <div className="space-y-6">
-            {/* Pie chart visualization */}
+            {}
             <div className="flex justify-center items-center">
               <div className="relative h-40 w-40">
                 {roleData.map((item, index) => {
-                  // Calculate the total percentage of this role
+                  
                   const percentage = total === 0 ? 0 : (item.count / total) * 100;
                   const cumulativePercentage = roleData
                     .slice(0, index)
                     .reduce((sum, prevItem) => sum + (prevItem.count / total) * 100, 0);
                   
-                  // Skip if percentage is 0
+                  
                   if (percentage === 0) return null;
                   
                   return (
@@ -108,7 +108,7 @@ export function RoleDistribution() {
               </div>
             </div>
 
-            {/* Legend */}
+            {}
             <div className="grid grid-cols-3 gap-2">
               {roleData.map((item) => (
                 <div key={item.role} className="flex flex-col items-center">
diff --git a/front-next/src/components/pages/dashboard/stats-overview.tsx b/front-next/src/components/pages/dashboard/stats-overview.tsx
index ad64655..9f14a7c 100644
--- a/front-next/src/components/pages/dashboard/stats-overview.tsx
+++ b/front-next/src/components/pages/dashboard/stats-overview.tsx
@@ -1,13 +1,12 @@
-import React from "react";
-import { 
-  Users, 
-  UserCog, 
-  Building, 
-  CalendarDays, 
-  TrendingUp, 
-  BarChart3 
+import {
+  BarChart3,
+  Building,
+  CalendarDays,
+  TrendingUp,
+  UserCog,
+  Users
 } from "lucide-react";
-import { EmployeeRole } from "@/types/employee";
+
 import { StatCard } from '@/components/shared/data-display/stat-card';
 import { Skeleton } from "@/components/ui/skeleton";
 
@@ -43,7 +42,7 @@ export function StatsOverview({
 
   return (
     <div className="space-y-6">
-      {/* Primeira linha de estatísticas */}
+      {}
       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 -mt-8">
         <StatCard
           title="Total de Funcionários"
@@ -78,7 +77,7 @@ export function StatsOverview({
         />
       </div>
 
-      {/* Segunda linha de estatísticas */}
+      {}
       <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
         <StatCard
           title="Tamanho Médio de Equipe"
diff --git a/front-next/src/components/pages/dashboard/top-managers.tsx b/front-next/src/components/pages/dashboard/top-managers.tsx
index 53d2e9b..378fb2f 100644
--- a/front-next/src/components/pages/dashboard/top-managers.tsx
+++ b/front-next/src/components/pages/dashboard/top-managers.tsx
@@ -8,18 +8,18 @@ import { EmployeeRole } from "@/types/employee";
 export function TopManagers() {
   const { data, isLoading, isError } = useGetEmployees({
     pageNumber: 1,
-    pageSize: 100, // Get a larger sample
+    pageSize: 100, 
   });
 
-  // Count employees reporting to each manager
+  
   const getManagersList = () => {
     if (!data?.items?.length) return [];
 
-    // Count subordinates for each manager
+    
     const managerSubordinates: Record<string, number> = {};
     const managerInfo: Record<string, { name: string; role: EmployeeRole }> = {};
 
-    // First, get all managers and their info
+    
     data.items.forEach(employee => {
       if (employee.role === EmployeeRole.Leader || employee.role === EmployeeRole.Director) {
         managerInfo[employee.id!] = {
@@ -29,7 +29,7 @@ export function TopManagers() {
       }
     });
 
-    // Then count subordinates
+    
     data.items.forEach(employee => {
       if (employee.managerId && managerInfo[employee.managerId]) {
         if (!managerSubordinates[employee.managerId]) {
@@ -39,7 +39,7 @@ export function TopManagers() {
       }
     });
 
-    // Create the result array
+    
     const result = Object.entries(managerSubordinates).map(([id, count]) => ({
       id,
       name: managerInfo[id].name,
@@ -47,7 +47,7 @@ export function TopManagers() {
       subordinateCount: count
     }));
 
-    // Sort by number of subordinates (descending)
+    
     return result.sort((a, b) => b.subordinateCount - a.subordinateCount).slice(0, 5);
   };
 
diff --git a/front-next/src/components/pages/departments/department-form.tsx b/front-next/src/components/pages/departments/department-form.tsx
index fd7a988..3e3a225 100644
--- a/front-next/src/components/pages/departments/department-form.tsx
+++ b/front-next/src/components/pages/departments/department-form.tsx
@@ -1,7 +1,6 @@
 import React from "react";
 import { useForm } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
-import * as z from "zod";
 import { Department, CreateDepartmentDto, UpdateDepartmentDto } from "@/types/deparment";
 import { Button } from "@/components/ui/button";
 import {
@@ -16,19 +15,7 @@ import { Input } from "@/components/ui/input";
 import { Textarea } from "@/components/ui/textarea";
 import { Switch } from "@/components/ui/switch";
 import { Loader2 } from "lucide-react";
-
-// Schema for department form validation
-const departmentFormSchema = z.object({
-  name: z.string().min(2, {
-    message: "O nome do departamento deve ter pelo menos 2 caracteres.",
-  }),
-  description: z.string().min(5, {
-    message: "A descrição deve ter pelo menos 5 caracteres.",
-  }),
-  isActive: z.boolean().default(true),
-});
-
-type DepartmentFormValues = z.infer<typeof departmentFormSchema>;
+import { departmentFormSchema, DepartmentFormValues } from "@/schemas/department";
 
 interface DepartmentFormProps {
   department?: Department;
@@ -37,7 +24,7 @@ interface DepartmentFormProps {
 }
 
 export function DepartmentForm({ department, onSubmit, isLoading }: DepartmentFormProps) {
-  // Initialize form with default values or existing department data
+  
   const form = useForm<DepartmentFormValues>({
     resolver: zodResolver(departmentFormSchema),
     defaultValues: {
@@ -47,16 +34,16 @@ export function DepartmentForm({ department, onSubmit, isLoading }: DepartmentFo
     },
   });
 
-  // Handle form submission
+  
   function handleSubmit(data: DepartmentFormValues) {
     if (department) {
-      // If editing existing department
+      
       onSubmit({
         id: department.id,
         ...data,
       } as UpdateDepartmentDto);
     } else {
-      // If creating new department
+      
       onSubmit({
         ...data,
       } as CreateDepartmentDto);
diff --git a/front-next/src/components/pages/departments/stats-overview.tsx b/front-next/src/components/pages/departments/stats-overview.tsx
index 92925ed..b51a7ca 100644
--- a/front-next/src/components/pages/departments/stats-overview.tsx
+++ b/front-next/src/components/pages/departments/stats-overview.tsx
@@ -1,14 +1,12 @@
-import React from "react";
-import { 
-  Building, 
-  Users, 
-  CalendarDays, 
-  Clock, 
-  Briefcase,
-  CheckCircle
-} from "lucide-react";
 import { StatCard } from '@/components/shared/data-display/stat-card';
 import { Skeleton } from "@/components/ui/skeleton";
+import {
+  Briefcase,
+  Building,
+  CalendarDays,
+  CheckCircle,
+  Users
+} from "lucide-react";
 
 export interface DepartmentStatsData {
   totalDepartments: number;
diff --git a/front-next/src/components/pages/employees/employee-table.tsx b/front-next/src/components/pages/employees/employee-table.tsx
index cb9e9aa..0275966 100644
--- a/front-next/src/components/pages/employees/employee-table.tsx
+++ b/front-next/src/components/pages/employees/employee-table.tsx
@@ -31,7 +31,7 @@ export function EmployeeTable({
   canEdit,
   canDelete,
 }: EmployeeTableProps) {
-  // Get role display name
+  
   const getRoleDisplay = (role: EmployeeRole): string => {
     switch (role) {
       case EmployeeRole.Director:
@@ -45,7 +45,7 @@ export function EmployeeTable({
     }
   };
 
-  // Get role badge variant
+  
   const getRoleBadgeVariant = (role: EmployeeRole) => {
     switch (role) {
       case EmployeeRole.Director:
@@ -59,7 +59,7 @@ export function EmployeeTable({
     }
   };
 
-  // Get full name
+  
   const getFullName = (employee: Employee): string => {
     if (employee.fullName) return employee.fullName;
     return `${employee.firstName || ''} ${employee.lastName || ''}`.trim();
diff --git a/front-next/src/components/pages/employees/stat-card.tsx b/front-next/src/components/pages/employees/stat-card.tsx
index 17a4820..c1eafcd 100644
--- a/front-next/src/components/pages/employees/stat-card.tsx
+++ b/front-next/src/components/pages/employees/stat-card.tsx
@@ -1,5 +1,5 @@
 import { Card, CardContent } from "@/components/ui/card";
-import { LucideIcon } from "lucide-react";
+
 import { cn } from "@/lib/utils";
 
 interface StatCardProps {
diff --git a/front-next/src/components/pages/profile/password-form.tsx b/front-next/src/components/pages/profile/password-form.tsx
index 37b4d12..7d3c0d6 100644
--- a/front-next/src/components/pages/profile/password-form.tsx
+++ b/front-next/src/components/pages/profile/password-form.tsx
@@ -2,7 +2,6 @@ import { useState } from "react";
 import { useForm } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
 import { Eye, EyeOff } from "lucide-react";
-import * as z from "zod";
 
 import {
   Form,
@@ -15,25 +14,7 @@ import {
 import { Input } from "@/components/ui/input";
 import { Button } from "@/components/ui/button";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-
-// Password update form schema
-const passwordSchema = z
-  .object({
-    currentPassword: z.string().min(8, "Senha atual deve ter pelo menos 8 caracteres"),
-    newPassword: z
-      .string()
-      .min(8, "Nova senha deve ter pelo menos 8 caracteres")
-      .regex(/[A-Z]/, "Senha deve conter pelo menos uma letra maiúscula")
-      .regex(/[0-9]/, "Senha deve conter pelo menos um número")
-      .regex(/[^a-zA-Z0-9]/, "Senha deve conter pelo menos um caractere especial"),
-    confirmNewPassword: z.string().min(8, "Confirmação de senha deve ter pelo menos 8 caracteres"),
-  })
-  .refine((data) => data.newPassword === data.confirmNewPassword, {
-    message: "Senhas não conferem",
-    path: ["confirmNewPassword"],
-  });
-
-export type PasswordFormValues = z.infer<typeof passwordSchema>;
+import { passwordChangeSchema, PasswordFormValues } from "@/schemas/auth";
 
 interface PasswordFormProps {
   onSubmit: (data: PasswordFormValues) => Promise<void>;
@@ -45,9 +26,9 @@ export function PasswordForm({ onSubmit, isLoading }: PasswordFormProps) {
   const [showNewPassword, setShowNewPassword] = useState(false);
   const [showConfirmPassword, setShowConfirmPassword] = useState(false);
 
-  // Form for password update
+  
   const form = useForm<PasswordFormValues>({
-    resolver: zodResolver(passwordSchema),
+    resolver: zodResolver(passwordChangeSchema),
     defaultValues: {
       currentPassword: "",
       newPassword: "",
diff --git a/front-next/src/components/pages/profile/personal-info-form.tsx b/front-next/src/components/pages/profile/personal-info-form.tsx
index 756be54..3fa6896 100644
--- a/front-next/src/components/pages/profile/personal-info-form.tsx
+++ b/front-next/src/components/pages/profile/personal-info-form.tsx
@@ -1,15 +1,18 @@
-import { useState, useEffect, useMemo } from "react";
-import { useForm } from "react-hook-form";
 import { zodResolver } from "@hookform/resolvers/zod";
-import { CalendarIcon, Pencil, PlusCircle, Trash2 } from "lucide-react";
 import { format } from "date-fns";
 import { ptBR } from "date-fns/locale";
-import * as z from "zod";
+import { CalendarIcon, Pencil, PlusCircle, Trash2 } from "lucide-react";
+import { useEffect, useMemo, useState } from "react";
+import { useForm } from "react-hook-form";
 
-import { Employee, EmployeeRole, PhoneType, UnifiedUserData, UserDataSource } from "@/types/employee";
-import { CurrentUserResponse } from "@/services/auth";
 import { normalizeUserData } from "@/lib/utils";
+import { PersonalInfoFormValues, personalInfoSchema } from "@/schemas/employee";
+import { CurrentUserResponse } from "@/services/auth";
+import { Employee, EmployeeRole, PhoneType, UnifiedUserData, UserDataSource } from "@/types/employee";
 
+import { Button } from "@/components/ui/button";
+import { Calendar } from "@/components/ui/calendar";
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 import {
   Form,
   FormControl,
@@ -19,13 +22,11 @@ import {
   FormMessage,
 } from "@/components/ui/form";
 import { Input } from "@/components/ui/input";
-import { Button } from "@/components/ui/button";
 import {
   Popover,
   PopoverContent,
   PopoverTrigger,
 } from "@/components/ui/popover";
-import { Calendar } from "@/components/ui/calendar";
 import {
   Select,
   SelectContent,
@@ -33,33 +34,8 @@ import {
   SelectTrigger,
   SelectValue,
 } from "@/components/ui/select";
-import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
-
-// Não usamos mais IDs no frontend para novos telefones
-// Deixamos a API gerar IDs apropriados no formato GUID
 
-// Personal information form schema
-const personalInfoSchema = z.object({
-  firstName: z.string().min(2, "Nome deve ter pelo menos 2 caracteres"),
-  lastName: z.string().min(2, "Sobrenome deve ter pelo menos 2 caracteres"),
-  email: z.string().email("Email inválido"),
-  birthDate: z.date({
-    required_error: "Data de nascimento é obrigatória",
-  }),
-  documentNumber: z.string().optional(),
-  age: z.number().nullable().optional(),
-  role: z.number().optional(),
-  department: z.string().optional(),
-  phoneNumbers: z.array(
-    z.object({
-      id: z.string().optional(),
-      number: z.string().min(8, "Número de telefone deve ter pelo menos 8 dígitos"),
-      type: z.nativeEnum(PhoneType),
-    })
-  ),
-});
 
-export type PersonalInfoFormValues = z.infer<typeof personalInfoSchema>;
 
 interface PersonalInfoFormProps {
   user: UserDataSource;
@@ -70,18 +46,18 @@ interface PersonalInfoFormProps {
 export function PersonalInfoForm({ user, onSubmit, isLoading }: PersonalInfoFormProps) {
   const [isEditing, setIsEditing] = useState(false);
 
-  // Usar a função utilitária para normalizar dados do usuário
+  
   const normalizedUser = useMemo(() => {
-    // Verificar se user é do tipo UnifiedUserData
+    
     if (user && 'id' in user && 'firstName' in user && 'lastName' in user && 'email' in user && 'fullName' in user) {
-      // Se já for UnifiedUserData, retornar diretamente
+      
       return user as UnifiedUserData;
     }
-    // Caso contrário, normalizar usando a função
+    
     return normalizeUserData(user as (Employee | CurrentUserResponse | null | undefined));
   }, [user]);
   
-  // Adaptar os dados normalizados para o formato do formulário
+  
   const userData = useMemo(() => {
     if (!normalizedUser) return null;
     
@@ -125,35 +101,35 @@ export function PersonalInfoForm({ user, onSubmit, isLoading }: PersonalInfoForm
       await onSubmit(data);
       setIsEditing(false);
     } catch (error) {
-      // Erro já tratado pelo componente pai
+      
       console.error("Erro ao submeter formulário:", error);
     }
   };
 
-  // Gerenciamento seguro de arrays no React Hook Form
+  
   const handleAddPhone = () => {
-    // Obter o valor atual dos telefones de forma segura
+    
     const currentPhones = form.getValues("phoneNumbers") || [];
     
-    // Criar um novo telefone com valores iniciais seguros
-    // SEM ID PARA PERMITIR QUE A API GERE UM GUID VÁLIDO
+    
+    
     const newPhone = {
       number: "",
       type: PhoneType.Mobile
     };
     
-    // Criar um novo array para evitar mutações
+    
     const newPhones = [...currentPhones, newPhone];
     
-    // Atualizar o formulário com o novo array
+    
     form.setValue("phoneNumbers", newPhones, { 
-      shouldValidate: false, // Não validar imediatamente para evitar erros
+      shouldValidate: false, 
       shouldDirty: true,
       shouldTouch: true
     });
     
-    // Focar no campo de número do novo telefone após um pequeno delay
-    // para garantir que o componente foi renderizado
+    
+    
     const newIndex = newPhones.length - 1;
     setTimeout(() => {
       form.setFocus(`phoneNumbers.${newIndex}.number`);
@@ -163,16 +139,16 @@ export function PersonalInfoForm({ user, onSubmit, isLoading }: PersonalInfoForm
   const handleRemovePhone = (index: number) => {
     const currentPhones = form.getValues("phoneNumbers") || [];
     
-    // Verificar se o índice é válido
+    
     if (index < 0 || index >= currentPhones.length) {
       console.error(`Índice inválido para remoção: ${index}, tamanho do array: ${currentPhones.length}`);
       return;
     }
     
-    // Verificar se o telefone tem um ID (existente no banco)
+    
     const phoneToRemove = currentPhones[index];
     
-    // Se o telefone já existe no banco (tem ID) e é o único, apenas limpar o número
+    
     if (phoneToRemove?.id && currentPhones.length === 1) {
       const resetPhone = { 
         id: phoneToRemove.id, 
@@ -181,19 +157,19 @@ export function PersonalInfoForm({ user, onSubmit, isLoading }: PersonalInfoForm
       };
       
       form.setValue("phoneNumbers", [resetPhone], {
-        shouldValidate: false, // Não validar imediatamente para evitar erros
+        shouldValidate: false, 
         shouldDirty: true,
         shouldTouch: true
       });
       return;
     }
     
-    // Caso contrário, remover normalmente
+    
     const newPhones = currentPhones.filter((_, i) => i !== index);
     
-    // Atualizar o formulário com o novo array
+    
     form.setValue("phoneNumbers", newPhones, {
-      shouldValidate: false, // Não validar imediatamente para evitar erros
+      shouldValidate: false, 
       shouldDirty: true,
       shouldTouch: true
     });
@@ -410,7 +386,7 @@ export function PersonalInfoForm({ user, onSubmit, isLoading }: PersonalInfoForm
               </div>
 
               {form.watch("phoneNumbers")?.map((phone, index) => {
-                // Usar índice estável como chave
+                
                 const phoneId = phone.id || `phone-${index}`;
                 
                 return (
diff --git a/front-next/src/components/pages/profile/profile-header.tsx b/front-next/src/components/pages/profile/profile-header.tsx
index db80271..b478693 100644
--- a/front-next/src/components/pages/profile/profile-header.tsx
+++ b/front-next/src/components/pages/profile/profile-header.tsx
@@ -13,7 +13,7 @@ interface ProfileHeaderProps {
 }
 
 export function ProfileHeader({ user, isLoading }: ProfileHeaderProps) {
-  // Get role display name and badge variant
+  
   const getRoleInfo = (role: number) => {
     let label = 'Desconhecido';
     let variant: 'default' | 'secondary' | 'outline' = 'outline';
@@ -36,14 +36,14 @@ export function ProfileHeader({ user, isLoading }: ProfileHeaderProps) {
     return { label, variant };
   };
   
-  // Usar o hook useMemo para evitar recálculos desnecessários
+  
   const normalizedUser = React.useMemo(() => {
-    // Verificar se user é do tipo UnifiedUserData
+    
     if (user && 'id' in user && 'firstName' in user && 'lastName' in user && 'email' in user && 'fullName' in user) {
-      // Se já for UnifiedUserData, retornar diretamente
+      
       return user as UnifiedUserData;
     }
-    // Caso contrário, normalizar usando a função
+    
     return normalizeUserData(user as (Employee | CurrentUserResponse | null | undefined));
   }, [user]);
   
diff --git a/front-next/src/components/shared/filters/filter-bar.tsx b/front-next/src/components/shared/filters/filter-bar.tsx
index 9862922..fa9ab3b 100644
--- a/front-next/src/components/shared/filters/filter-bar.tsx
+++ b/front-next/src/components/shared/filters/filter-bar.tsx
@@ -14,7 +14,7 @@ type FilterOption = {
   id: string;
   name: string;
   value: string;
-};
+}
 
 interface FilterBarProps {
   searchTerm: string;
diff --git a/front-next/src/components/shared/forms/employee-form.tsx b/front-next/src/components/shared/forms/employee-form.tsx
index f8d2351..8fc198d 100644
--- a/front-next/src/components/shared/forms/employee-form.tsx
+++ b/front-next/src/components/shared/forms/employee-form.tsx
@@ -13,7 +13,8 @@ import {
   CreateEmployeeFormValues, 
   createEmployeeSchema,
   formValuesToCreateEmployeeDTO
-} from "@/lib/validations/employee";
+} from "@/schemas/employee";
+import { getMinBirthDate } from "@/schemas/utils";
 import { employeeService } from "@/services/employee";
 import { useAuth } from "@/hooks/use-auth";
 import { PhoneFieldArray } from "@/components/shared/forms/phone-field";
@@ -46,7 +47,7 @@ import {
   RadioGroupItem,
 } from "@/components/ui/radio-group";
 
-// Interface para os departamentos e gerentes
+
 interface Department {
   id: string;
   name: string;
@@ -69,7 +70,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
   const [managers, setManagers] = useState<Manager[]>([]);
   const [isLoading, setIsLoading] = useState(true);
 
-  // Form with validation
+  
   const form = useForm<CreateEmployeeFormValues>({
     resolver: zodResolver(createEmployeeSchema),
     defaultValues: {
@@ -87,7 +88,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
     mode: "onBlur",
   });
 
-  // Fetch departments and managers on component mount
+  
   useEffect(() => {
     const fetchData = async () => {
       try {
@@ -97,11 +98,11 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
         ]);
         
         setDepartments(departmentsData);
-        // Filtrar e mapear apenas gerentes com ID válido
+        
         const validManagers: Manager[] = managersData
-          .filter(manager => manager.id) // Filtra apenas gerentes com ID
+          .filter(manager => manager.id) 
           .map(manager => ({
-            id: manager.id as string, // Cast para string não-opcional
+            id: manager.id as string, 
             name: manager.name || `${manager.firstName} ${manager.lastName}`
           }));
         
@@ -117,7 +118,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
     fetchData();
   }, []);
 
-  // Custom document validation
+  
   const validateDocument = async (value: string) => {
     try {
       const isValid = await employeeService.validateDocument(value);
@@ -131,14 +132,14 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
     }
   };
 
-  // Add custom document validation
+  
   useEffect(() => {
     const { register, trigger } = form;
     register("documentNumber", {
       validate: validateDocument,
     });
 
-    // Trigger validation when document changes
+    
     const subscription = form.watch((value, { name }) => {
       if (name === "documentNumber" && value.documentNumber && value.documentNumber.length >= 8) {
         trigger("documentNumber");
@@ -148,18 +149,18 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
     return () => subscription.unsubscribe();
   }, [form]);
 
-  // Form submission
+  
   const onSubmit = async (data: CreateEmployeeFormValues) => {
     setIsSubmitting(true);
     
     try {
-      // Validate that the user can create this role
+      
       if (!canCreateRole(data.role)) {
         toast.error("Você não tem permissão para criar um funcionário com este cargo");
         return;
       }
       
-      // Convert form values to API DTO
+      
       const employeeDTO = formValuesToCreateEmployeeDTO(data);
       
       await employeeService.createEmployee(employeeDTO);
@@ -186,7 +187,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
     <Form {...form}>
       <form onSubmit={form.handleSubmit(onSubmit)} className={`space-y-6 ${className}`}>
         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
-          {/* Nome */}
+          {}
           <FormField
             control={form.control}
             name="firstName"
@@ -201,7 +202,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Sobrenome */}
+          {}
           <FormField
             control={form.control}
             name="lastName"
@@ -216,7 +217,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Email */}
+          {}
           <FormField
             control={form.control}
             name="email"
@@ -235,7 +236,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Documento */}
+          {}
           <FormField
             control={form.control}
             name="documentNumber"
@@ -253,7 +254,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Data de Nascimento */}
+          {}
           <FormField
             control={form.control}
             name="birthDate"
@@ -295,7 +296,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Departamento */}
+          {}
           <FormField
             control={form.control}
             name="department"
@@ -324,7 +325,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Gerente */}
+          {}
           <FormField
             control={form.control}
             name="managerId"
@@ -354,7 +355,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Senha */}
+          {}
           <FormField
             control={form.control}
             name="password"
@@ -373,7 +374,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
             )}
           />
 
-          {/* Cargo */}
+          {}
           <FormField
             control={form.control}
             name="role"
@@ -442,7 +443,7 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
           />
         </div>
 
-        {/* Telefones */}
+        {}
         <PhoneFieldArray />
 
         <Button 
@@ -457,9 +458,4 @@ export function EmployeeForm({ onSuccess, className }: EmployeeFormProps) {
   );
 }
 
-// Helper function to get minimum birth date (18 years ago)
-function getMinBirthDate() {
-  const date = new Date();
-  date.setFullYear(date.getFullYear() - 18);
-  return date;
-}
\ No newline at end of file
+
diff --git a/front-next/src/components/shared/forms/login-form.tsx b/front-next/src/components/shared/forms/login-form.tsx
index 806dcfa..f073bb0 100644
--- a/front-next/src/components/shared/forms/login-form.tsx
+++ b/front-next/src/components/shared/forms/login-form.tsx
@@ -7,7 +7,7 @@ import { zodResolver } from "@hookform/resolvers/zod";
 import { toast } from "sonner";
 import { Loader2, Mail, Lock } from "lucide-react";
 
-import { loginSchema, LoginFormValues } from "@/lib/validations/auth";
+import { loginSchema, LoginFormValues } from "@/schemas/auth";
 import { useAuth } from "@/hooks/use-auth";
 
 import { Button } from "@/components/ui/button";
@@ -54,7 +54,7 @@ export function LoginForm({
       if (onSuccess) {
         onSuccess();
       } else {
-        // Aguarde um momento antes de redirecionar para garantir que o estado de autenticação seja atualizado
+        
         setTimeout(() => {
           router.push("/dashboard");
         }, 500);
@@ -67,7 +67,7 @@ export function LoginForm({
     }
   }
 
-  // Simple version
+  
   if (variant === "simple") {
     return (
       <div className={containerClassName}>
@@ -111,7 +111,7 @@ export function LoginForm({
     );
   }
 
-  // Card version with icons
+  
   return (
     <div className={containerClassName}>
       <Form {...form}>
@@ -174,7 +174,6 @@ export function LoginForm({
         </form>
       </Form>
       <div className="text-center text-sm text-muted-foreground mt-4">
-
         <p>Credenciais de exemplo: admin@companymanager.com / Admin@123</p>
       </div>
     </div>
diff --git a/front-next/src/components/shared/forms/phone-field.tsx b/front-next/src/components/shared/forms/phone-field.tsx
index ad1a1f0..47cd776 100644
--- a/front-next/src/components/shared/forms/phone-field.tsx
+++ b/front-next/src/components/shared/forms/phone-field.tsx
@@ -3,7 +3,7 @@
 import { useState } from "react";
 import { useFormContext, useFieldArray } from "react-hook-form";
 import { PhoneType } from "@/types/employee";
-import { CreateEmployeeFormValues } from "@/lib/validations/employee";
+import { CreateEmployeeFormValues } from "@/schemas/employee";
 
 import { Button } from "@/components/ui/button";
 import { Input } from "@/components/ui/input";
@@ -30,7 +30,7 @@ export function PhoneFieldArray() {
     control,
   });
 
-  // Add a phone if none exist initially
+  
   const [initialized, setInitialized] = useState(false);
   if (!initialized && fields.length === 0) {
     append({ number: "", type: PhoneType.Mobile });
diff --git a/front-next/src/components/shared/lists/employee-list.tsx b/front-next/src/components/shared/lists/employee-list.tsx
index 1e52a89..719fedf 100644
--- a/front-next/src/components/shared/lists/employee-list.tsx
+++ b/front-next/src/components/shared/lists/employee-list.tsx
@@ -24,7 +24,7 @@ export function EmployeeList({
   onDeleteEmployee,
   className
 }: EmployeeListProps) {
-  // State for filters
+  
   const [filters, setFilters] = useState<EmployeeFilters>({
     pageNumber: 1,
     pageSize: 10,
@@ -32,7 +32,7 @@ export function EmployeeList({
     ...externalFilters
   });
 
-  // Update internal filters when external filters change
+  
   useEffect(() => {
     if (externalFilters) {
       setFilters(prev => ({
@@ -42,20 +42,20 @@ export function EmployeeList({
     }
   }, [externalFilters]);
 
-  // Use the query hook
+  
   const { data, isLoading, isError, error } = useGetEmployees(filters);
   
-  // Handle pagination
+  
   const handlePageChange = (page: number) => {
     setFilters((prev) => ({ ...prev, pageNumber: page }));
   };
   
-  // Handle search
+  
   const handleSearch = (term: string) => {
     setFilters((prev) => ({ ...prev, searchTerm: term, pageNumber: 1 }));
   };
   
-  // Get the role as string
+  
   const getRoleDisplay = (role: EmployeeRole): string => {
     switch (role) {
       case EmployeeRole.Director:
@@ -83,7 +83,7 @@ export function EmployeeList({
   
   return (
     <div className={`space-y-4 ${className}`}>
-      {/* Search input */}
+      {}
       <div className="relative">
         <div className="relative">
           <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
@@ -97,7 +97,7 @@ export function EmployeeList({
         </div>
       </div>
       
-      {/* Employees table */}
+      {}
       <div className="rounded-md border">
         <Table>
           <TableHeader>
@@ -169,7 +169,7 @@ export function EmployeeList({
         </Table>
       </div>
       
-      {/* Pagination */}
+      {}
       {data && data.totalPages > 1 && (
         <div className="flex justify-between items-center mt-4">
           <div className="text-sm text-muted-foreground">
@@ -194,7 +194,7 @@ export function EmployeeList({
                        (page >= currentPage - 1 && page <= currentPage + 1);
               })
               .map((page, index, array) => {
-                // Add ellipsis
+                
                 if (index > 0 && array[index - 1] !== page - 1) {
                   return (
                     <span key={`ellipsis-${page}`} className="flex items-center px-3">
diff --git a/front-next/src/components/shared/onboarding/welcome-dialog.tsx b/front-next/src/components/shared/onboarding/welcome-dialog.tsx
index dbd7e55..b9b64b8 100644
--- a/front-next/src/components/shared/onboarding/welcome-dialog.tsx
+++ b/front-next/src/components/shared/onboarding/welcome-dialog.tsx
@@ -21,7 +21,7 @@ export function WelcomeDialog() {
   const dispatch = useAppDispatch();
   const showWelcomeDialog = useAppSelector((state: RootState) => state.ui.showWelcomeDialog);
   
-  // Check if it's the first login - show the dialog on first visit
+  
   useEffect(() => {
     if (user) {
       const hasSeenWelcome = localStorage.getItem("hasSeenWelcome");
@@ -31,7 +31,7 @@ export function WelcomeDialog() {
     }
   }, [user, dispatch]);
   
-  // Close the dialog and set the flag in localStorage
+  
   const handleClose = () => {
     dispatch(setShowWelcomeDialog(false));
     localStorage.setItem("hasSeenWelcome", "true");
diff --git a/front-next/src/components/shared/theme/theme-toggle.tsx b/front-next/src/components/shared/theme/theme-toggle.tsx
index d8c4dfb..f5ee323 100644
--- a/front-next/src/components/shared/theme/theme-toggle.tsx
+++ b/front-next/src/components/shared/theme/theme-toggle.tsx
@@ -18,7 +18,7 @@ export function ThemeToggle() {
   const dispatch = useAppDispatch();
   const themeMode = useAppSelector((state: RootState) => state.theme.mode);
   
-  // Update the document theme when the theme mode changes
+  
   useEffect(() => {
     const isDark = 
       themeMode === "dark" || 
diff --git a/front-next/src/components/ui/calendar.tsx b/front-next/src/components/ui/calendar.tsx
index 92279dd..07d0bad 100644
--- a/front-next/src/components/ui/calendar.tsx
+++ b/front-next/src/components/ui/calendar.tsx
@@ -30,23 +30,23 @@ function Calendar({
   onMonthChange,
   ...props
 }: CalendarProps) {
-  // Estado local para controlar o mês atual se não for fornecido externamente
+  
   const [internalMonth, setInternalMonth] = useState<Date>(month || new Date())
   
-  // Sincronizar o estado interno com o prop external, se fornecido
+  
   useEffect(() => {
     if (month) {
       setInternalMonth(month)
     }
   }, [month])
   
-  // Função para atualizar o mês
+  
   const handleMonthChange = (date: Date) => {
-    // Se onMonthChange for fornecida, usamos ela
+    
     if (onMonthChange) {
       onMonthChange(date)
     } else {
-      // Caso contrário, atualizamos o estado interno
+      
       setInternalMonth(date)
     }
   }
@@ -61,7 +61,7 @@ function Calendar({
         months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
         month: "space-y-4",
         caption: "flex justify-center pt-1 relative items-center",
-        caption_label: "hidden", // Esconder o label padrão
+        caption_label: "hidden", 
         nav: "space-x-1 flex items-center",
         nav_button: cn(
           buttonVariants({ variant: "outline" }),
@@ -112,18 +112,18 @@ function Calendar({
         )
       }}
       locale={ptBR}
-      disabled={props.disabled || { after: new Date() }} // Desabilitar datas futuras
+      disabled={props.disabled || { after: new Date() }} 
       {...props}
     />
   )
 }
 
-// Propriedades estendidas para o CustomCaption
+
 interface CustomCaptionProps extends CaptionProps {
   onMonthSelect: (date: Date) => void;
 }
 
-// Componente customizado para o cabeçalho do calendário
+
 function CustomCaption({ displayMonth, onMonthSelect }: CustomCaptionProps) {
   const months = [
     "Janeiro", "Fevereiro", "Março", "Abril", 
@@ -131,13 +131,13 @@ function CustomCaption({ displayMonth, onMonthSelect }: CustomCaptionProps) {
     "Setembro", "Outubro", "Novembro", "Dezembro"
   ];
   
-  // Calcular o ano atual e o intervalo de anos para seleção
-  // Considerar que a pessoa deve ter pelo menos 18 anos
+  
+  
   const today = new Date();
-  const maxYear = today.getFullYear() - 18; // O ano máximo é 18 anos atrás
-  const minYear = maxYear - 82; // 100 anos de range (18 até 100 anos)
+  const maxYear = today.getFullYear() - 18; 
+  const minYear = maxYear - 82; 
+  
   
-  // Criar array de anos (do mais recente para o mais antigo)
   const years = Array.from(
     { length: (maxYear - minYear) + 1 }, 
     (_, i) => maxYear - i
diff --git a/front-next/src/hooks/use-auth.tsx b/front-next/src/hooks/use-auth.tsx
index 23c8836..679d613 100644
--- a/front-next/src/hooks/use-auth.tsx
+++ b/front-next/src/hooks/use-auth.tsx
@@ -118,7 +118,7 @@ export const AuthProvider: React.FC<AuthProviderProps> = ({
       
       const userData = authResponse.employee;
       
-      // Certifique-se de que o usuário é definido corretamente
+      
       const userInfo = {
         id: userData.id!,
         name: `${userData.firstName} ${userData.lastName}`,
@@ -128,7 +128,7 @@ export const AuthProvider: React.FC<AuthProviderProps> = ({
       
       setUser(userInfo);
       
-      // Atualizar também o estado de authChecked para evitar verificações redundantes
+      
       setAuthChecked(true);
     } catch (error) {
       console.error("Login error:", error);
diff --git a/front-next/src/lib/api/auth.ts b/front-next/src/lib/api/auth.ts
index 27a11b7..be2cb33 100644
--- a/front-next/src/lib/api/auth.ts
+++ b/front-next/src/lib/api/auth.ts
@@ -1,7 +1,7 @@
 import { api } from "@/services/api";
 import { AuthResponseDTO, LoginDTO, RegisterEmployeeDTO, EmployeeRole, Employee } from "@/types/employee";
 
-// Simula um erro de rede ou servidor
+
 const simulateNetworkDelay = (ms: number) =>
   new Promise((resolve) => setTimeout(resolve, ms));
 
@@ -11,10 +11,10 @@ export async function loginUser(credentials: LoginDTO): Promise<AuthResponseDTO>
     if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_USE_MOCK === 'true') {
       await simulateNetworkDelay(Math.floor(Math.random() * 500) + 300);
       
-      // Credenciais de administrador
+      
       if (credentials.email === "admin@companymanager.com" && credentials.password === "Admin@123") {
         const now = new Date();
-        const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 horas depois
+        const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); 
         
         return {
           token: "mock-admin-jwt-token",
@@ -28,7 +28,7 @@ export async function loginUser(credentials: LoginDTO): Promise<AuthResponseDTO>
             documentNumber: "98765432100",
             birthDate: new Date("1985-01-01"),
             age: 40,
-            role: 3, // Director (Administrador)
+            role: 3, 
             department: "Diretoria",
             phoneNumbers: [
               { id: "1", number: "11988888888", type: 1 }
@@ -41,7 +41,7 @@ export async function loginUser(credentials: LoginDTO): Promise<AuthResponseDTO>
 
       if (credentials.email === "test@example.com" && credentials.password === "password123") {
         const now = new Date();
-        const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 24 horas depois
+        const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000); 
         
         return {
           token: "mock-jwt-token",
@@ -55,7 +55,7 @@ export async function loginUser(credentials: LoginDTO): Promise<AuthResponseDTO>
             documentNumber: "12345678900",
             birthDate: new Date("1990-01-01"),
             age: 33,
-            role: 2, // Leader
+            role: 2, 
             department: "TI",
             phoneNumbers: [
               { id: "1", number: "11999999999", type: 1 }
@@ -70,7 +70,7 @@ export async function loginUser(credentials: LoginDTO): Promise<AuthResponseDTO>
     }
     
 
-    return await api.post<AuthResponseDTO>("/Auth/login", credentials);
+    return await api.post<AuthResponseDTO>("/auth/login", credentials);
   } catch (error) {
     console.error("Erro ao fazer login:", error);
     throw error;
@@ -89,7 +89,7 @@ export async function getCurrentUser(): Promise<CurrentUserResponse> {
     if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_USE_MOCK === 'true') {
       await simulateNetworkDelay(Math.floor(Math.random() * 300) + 200);
       
-      // Verificar se o token é do administrador (simulação)
+      
       const token = typeof window !== 'undefined' ? localStorage.getItem("auth_token") : null;
       
       if (token === "mock-admin-jwt-token") {
@@ -131,11 +131,8 @@ export async function registerEmployee(employeeData: RegisterEmployeeDTO): Promi
       await simulateNetworkDelay(Math.floor(Math.random() * 800) + 500);
       
 
-      if (!employeeData.email.endsWith('@nossaempresa.com')) {
-        throw new Error("O email deve ser corporativo (@nossaempresa.com)");
-      }
+ 
       
-      // Simula um registro bem-sucedido
       return {
         id: Math.random().toString(36).substring(2, 15),
         firstName: employeeData.firstName,
diff --git a/front-next/src/lib/auth-cookies.ts b/front-next/src/lib/auth-cookies.ts
index 3f5a3a8..1da336b 100644
--- a/front-next/src/lib/auth-cookies.ts
+++ b/front-next/src/lib/auth-cookies.ts
@@ -3,34 +3,26 @@ import { ResponseCookie } from 'next/dist/compiled/@edge-runtime/cookies';
 
 export const AUTH_COOKIE_NAME = 'auth_token';
 
-/**
- * Define as opções padrão para o cookie de autenticação
- */
+
 const getDefaultCookieOptions = (): Partial<ResponseCookie> => ({
   httpOnly: true,
   secure: process.env.NODE_ENV === 'production',
   sameSite: 'lax',
-  maxAge: 60 * 60 * 24, // 1 dia em segundos
+  maxAge: 60 * 60 * 24, 
   path: '/',
 });
 
-/**
- * Salva o token de autenticação em um cookie
- */
+
 export function setAuthCookie(token: string): void {
   cookies().set(AUTH_COOKIE_NAME, token, getDefaultCookieOptions());
 }
 
-/**
- * Obtém o token de autenticação do cookie
- */
+
 export function getAuthCookie(): string | undefined {
   return cookies().get(AUTH_COOKIE_NAME)?.value;
 }
 
-/**
- * Remove o cookie de autenticação
- */
+
 export function removeAuthCookie(): void {
   cookies().delete(AUTH_COOKIE_NAME);
 }
diff --git a/front-next/src/lib/token-sync.ts b/front-next/src/lib/token-sync.ts
index bd8655b..3498d62 100644
--- a/front-next/src/lib/token-sync.ts
+++ b/front-next/src/lib/token-sync.ts
@@ -6,22 +6,17 @@ import Cookies from 'js-cookie';
 const AUTH_COOKIE_NAME = 'auth_token';
 const COOKIE_EXPIRY_DAYS = 1;
 
-/**
- * Hook para sincronizar o token entre localStorage e cookies
- * 
- * Este hook deve ser usado no componente de layout principal
- * para garantir que o token esteja disponível para o middleware
- */
+
 export function useTokenSync() {
   useEffect(() => {
-    // Função para sincronizar o token do localStorage para o cookie
+    
     const syncTokenToCookie = () => {
       if (typeof window === 'undefined') return;
       
       const token = localStorage.getItem('auth_token');
       
       if (token) {
-        // Se o token existe no localStorage, sincroniza com o cookie
+        
         Cookies.set(AUTH_COOKIE_NAME, token, {
           expires: COOKIE_EXPIRY_DAYS,
           path: '/',
@@ -30,28 +25,28 @@ export function useTokenSync() {
         });
         console.log('Token sincronizado do localStorage para cookie:', !!token);
       } else {
-        // Se o token não existe no localStorage, remove o cookie
+        
         Cookies.remove(AUTH_COOKIE_NAME, { path: '/' });
         console.log('Token removido do cookie');
       }
     };
 
-    // Sincroniza o token imediatamente quando o componente é montado
+    
     syncTokenToCookie();
 
-    // Adiciona um event listener para detectar mudanças no localStorage
+    
     const handleStorageChange = (event: StorageEvent) => {
       if (event.key === 'auth_token') {
         syncTokenToCookie();
       }
     };
 
-    // Adiciona um intervalo para verificar periodicamente o token
+    
     const intervalId = setInterval(syncTokenToCookie, 5000);
 
     window.addEventListener('storage', handleStorageChange);
     
-    // Cleanup: remove o event listener e o intervalo quando o componente é desmontado
+    
     return () => {
       window.removeEventListener('storage', handleStorageChange);
       clearInterval(intervalId);
@@ -59,10 +54,7 @@ export function useTokenSync() {
   }, []);
 }
 
-/**
- * Função para limpar o token tanto do localStorage quanto do cookie
- * Deve ser chamada durante o logout
- */
+
 export function clearAuthToken() {
   if (typeof window === 'undefined') return;
   
diff --git a/front-next/src/lib/utils.ts b/front-next/src/lib/utils.ts
index 2510290..01cc26c 100644
--- a/front-next/src/lib/utils.ts
+++ b/front-next/src/lib/utils.ts
@@ -25,16 +25,32 @@ export function getInitials(name: string): string {
   return `${firstInitial}${lastInitial}`.toUpperCase();
 }
 
-/**
- * Normaliza os dados do usuário em um formato unificado
- * para garantir consistência entre diferentes fontes de dados
- */
+// Function to validate phone numbers
+export function isAValidNumber(phoneNumber: string): boolean {
+  // Remove non-numeric characters
+  const cleanNumber = phoneNumber.replace(/\D/g, '');
+  
+  // Check if it has between 10 and 11 digits (with and without the 9)
+  if (cleanNumber.length < 10 || cleanNumber.length > 11) {
+    return false;
+  }
+  
+  // Check if the DDD is valid (between 11 and 99)
+  const ddd = parseInt(cleanNumber.substring(0, 2));
+  if (ddd < 11 || ddd > 99) {
+    return false;
+  }
+  
+  return true;
+}
+
+
 export function normalizeUserData(
   userData: Employee | CurrentUserResponse | null | undefined
 ): UnifiedUserData | null {
   if (!userData) return null;
 
-  // Determinar se é CurrentUserResponse (tem 'name' e não tem 'firstName')
+  
   if ('name' in userData && !('firstName' in userData)) {
     const nameParts = userData.name.split(' ');
     const firstName = nameParts[0] || '';
@@ -51,7 +67,7 @@ export function normalizeUserData(
     };
   }
   
-  // É um Employee
+  
   const employee = userData as Employee;
   
   return {
@@ -79,9 +95,7 @@ export function normalizeUserData(
   };
 }
 
-/**
- * Converte uma data para o formato ISO string com segurança
- */
+
 export function toISODateString(date: Date | string | undefined): string | undefined {
   if (!date) return undefined;
   
@@ -96,13 +110,11 @@ export function toISODateString(date: Date | string | undefined): string | undef
   return date.toISOString();
 }
 
-/**
- * Verifica se uma string é um GUID válido no formato usado pelo .NET
- */
+
 export function isValidGuid(str: string): boolean {
   if (!str) return false;
   
-  // Formato GUID padrão: 8-4-4-4-12 (total 36 caracteres incluindo hífens)
+  
   const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
   return guidRegex.test(str);
 }
diff --git a/front-next/src/lib/validations/auth.ts b/front-next/src/lib/validations/auth.ts
deleted file mode 100644
index 68e9406..0000000
--- a/front-next/src/lib/validations/auth.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import * as z from "zod";
-
-export const loginSchema = z.object({
-  email: z.string().email({
-    message: "Digite um e-mail válido.",
-  }),
-  password: z.string().min(6, {
-    message: "A senha deve ter pelo menos 6 caracteres.",
-  }),
-});
-
-export type LoginFormValues = z.infer<typeof loginSchema>;
\ No newline at end of file
diff --git a/front-next/src/lib/validations/employee.ts b/front-next/src/lib/validations/employee.ts
index b928b9c..cce8e4d 100644
--- a/front-next/src/lib/validations/employee.ts
+++ b/front-next/src/lib/validations/employee.ts
@@ -1,79 +1,113 @@
 import * as z from "zod";
 import { EmployeeRole, PhoneType } from "@/types/employee";
+import { isAValidNumber } from "@/lib/utils";
 
-// Validação para a data mínima de nascimento (18 anos)
-const getMinBirthDate = () => {
-  const date = new Date();
-  date.setFullYear(date.getFullYear() - 18);
-  return date;
-};
-
-// Esquema de validação para telefone
+// Validation for phone numbers
 export const phoneSchema = z.object({
   id: z.string().optional(),
-  number: z.string().min(8, {
-    message: "O número de telefone deve ter pelo menos 8 dígitos",
-  }),
-  type: z.nativeEnum(PhoneType, {
-    errorMap: () => ({ message: "Selecione um tipo de telefone válido" }),
-  }),
+  number: z
+    .string()
+    .min(8, {
+      message: "O número de telefone deve ter pelo menos 8 dígitos",
+    })
+    .refine(isAValidNumber, {
+      message: "Selecione um tipo de telefone válido",
+    }),
+  type: z.nativeEnum(PhoneType),
 });
 
-// Esquema de validação para novo funcionário
-export const createEmployeeSchema = z.object({
-  firstName: z.string().min(2, {
-    message: "O nome deve ter pelo menos 2 caracteres",
-  }),
-  lastName: z.string().min(2, {
-    message: "O sobrenome deve ter pelo menos 2 caracteres",
-  }),
-  email: z.string().email({
-    message: "Digite um email válido",
-  }),
-  documentNumber: z.string().min(8, {
-    message: "O número do documento deve ter pelo menos 8 caracteres",
-  }),
-  phoneNumbers: z.array(phoneSchema).min(1, {
-    message: "Adicione pelo menos um telefone",
-  }),
-  birthDate: z.date({
-    required_error: "A data de nascimento é obrigatória",
-    invalid_type_error: "A data de nascimento deve ser válida",
-  }).refine((date) => date <= getMinBirthDate(), {
-    message: "O funcionário deve ter pelo menos 18 anos",
-  }),
+// Schema para validação de funcionário
+export const employeeSchema = z.object({
+  firstName: z
+    .string()
+    .min(2, {
+      message: "O nome deve ter pelo menos 2 caracteres",
+    }),
+  lastName: z
+    .string()
+    .min(2, {
+      message: "O sobrenome deve ter pelo menos 2 caracteres",
+    }),
+  email: z
+    .string()
+    .email({
+      message: "Digite um email válido",
+    }),
+  documentNumber: z
+    .string()
+    .min(11, {
+      message: "O número do documento deve ter pelo menos 11 caracteres",
+    }),
+  phoneNumbers: z
+    .array(phoneSchema)
+    .min(1, {
+      message: "Adicione pelo menos um telefone",
+    }),
+  birthDate: z
+    .date({
+      required_error: "A data de nascimento é obrigatória",
+      invalid_type_error: "A data de nascimento deve ser válida",
+    })
+    .refine((date) => {
+      const today = new Date();
+      const birthDate = new Date(date);
+      const age = today.getFullYear() - birthDate.getFullYear();
+      return age >= 18;
+    }, {
+      message: "O funcionário deve ter pelo menos 18 anos",
+    }),
   department: z.string({
     required_error: "Selecione um departamento",
   }),
-  managerId: z.string().optional(),
-  password: z.string()
-    .min(8, { message: "A senha deve ter pelo menos 8 caracteres" })
-    .regex(/[A-Z]/, { message: "A senha deve conter pelo menos uma letra maiúscula" })
-    .regex(/[0-9]/, { message: "A senha deve conter pelo menos um número" })
-    .regex(/[^a-zA-Z0-9]/, { message: "A senha deve conter pelo menos um caractere especial" }),
+  password: z
+    .string()
+    .min(8, {
+      message: "A senha deve ter pelo menos 8 caracteres",
+    })
+    .regex(/[A-Z]/, {
+      message: "A senha deve conter pelo menos uma letra maiúscula",
+    })
+    .regex(/[0-9]/, {
+      message: "A senha deve conter pelo menos um número",
+    })
+    .regex(/[^a-zA-Z0-9]/, {
+      message: "A senha deve conter pelo menos um caractere especial",
+    }),
   role: z.nativeEnum(EmployeeRole, {
-    errorMap: () => ({ message: "Selecione um cargo válido" }),
+    required_error: "Selecione um cargo válido",
   }),
 });
 
-// Tipo para os valores do formulário
-export type CreateEmployeeFormValues = z.infer<typeof createEmployeeSchema>;
+// Função para validar os dados do funcionário
+export function validateEmployeeData(values: unknown) {
+  try {
+    // Converte a data de nascimento para um objeto Date
+    if (values && typeof values === "object" && "birthDate" in values) {
+      const birthDate = values.birthDate;
+      if (birthDate && typeof birthDate === "string") {
+        (values as any).birthDate = new Date(birthDate);
+      }
+    }
+
+    // Valida os números de telefone
+    if (values && typeof values === "object" && "phoneNumbers" in values) {
+      const phoneNumbers = values.phoneNumbers;
+      if (Array.isArray(phoneNumbers)) {
+        phoneNumbers.forEach((phone) => {
+          if (phone && typeof phone === "object" && "number" in phone) {
+            if (!isAValidNumber(phone.number)) {
+              throw new Error("Número de telefone inválido");
+            }
+          }
+        });
+      }
+    }
 
-// Conversor de valores do formulário para o DTO da API
-export const formValuesToCreateEmployeeDTO = (values: CreateEmployeeFormValues) => {
-  return {
-    firstName: values.firstName,
-    lastName: values.lastName,
-    email: values.email,
-    documentNumber: values.documentNumber,
-    birthDate: values.birthDate.toISOString(),
-    password: values.password,
-    role: values.role,
-    department: values.department,
-    managerId: values.managerId || undefined,
-    phoneNumbers: values.phoneNumbers.map(phone => ({
-      number: phone.number,
-      type: phone.type
-    }))
-  };
-};
\ No newline at end of file
+    return employeeSchema.parse(values);
+  } catch (error) {
+    if (error instanceof z.ZodError) {
+      return { error: error.format() };
+    }
+    return { error };
+  }
+}
diff --git a/front-next/src/lib/validations/register.ts b/front-next/src/lib/validations/register.ts
index 9e6f20b..77c089d 100644
--- a/front-next/src/lib/validations/register.ts
+++ b/front-next/src/lib/validations/register.ts
@@ -1,70 +1,82 @@
 import * as z from "zod";
 import { EmployeeRole, PhoneType } from "@/types/employee";
+import { isAValidNumber } from '../utils';
 
-// Função para validar número de telefone brasileiro
-export const isAValidNumber = (phoneNumber: string): boolean => {
-  // Remove caracteres especiais
-  const cleanNumber = phoneNumber.replace(/\D/g, '');
-  
-  // Verifica se tem a quantidade correta de dígitos (10 ou 11)
-  if (cleanNumber.length < 10 || cleanNumber.length > 11) {
-    return false;
-  }
-  
-  // Verifica se o DDD é válido (entre 11 e 99)
-  const ddd = parseInt(cleanNumber.substring(0, 2));
-  if (ddd < 11 || ddd > 99) {
-    return false;
-  }
-  
-  return true;
-};
-
-const phoneSchema = z.object({
-  number: z.string().refine(isAValidNumber, {
-    message: "O telefone deve ser um número brasileiro válido."
-  }),
+export const phoneSchema = z.object({
+  id: z.string().optional(),
+  number: z
+    .string()
+    .min(8)
+    .refine(isAValidNumber, {
+      message: "O número de telefone deve ser um número brasileiro válido",
+    }),
   type: z.nativeEnum(PhoneType, {
-    errorMap: () => ({ message: "Selecione um tipo de telefone válido." })
-  })
+    required_error: "Selecione um tipo de telefone válido",
+  }),
 });
 
-export const registerSchema = z.object({
-  firstName: z.string().min(2, {
-    message: "O nome deve ter pelo menos 2 caracteres."
-  }),
-  lastName: z.string().min(2, {
-    message: "O sobrenome deve ter pelo menos 2 caracteres."
-  }),
-  email: z.string().email({
-    message: "Digite um e-mail válido."
-  }).refine((email) => email.endsWith('@nossaempresa.com'), {
-    message: "O e-mail deve ser corporativo (@nossaempresa.com)."
-  }),
-  password: z.string()
-    .min(8, { message: "A senha deve ter pelo menos 8 caracteres." })
-    .regex(/[A-Z]/, { message: "A senha deve conter pelo menos uma letra maiúscula." })
-    .regex(/[a-z]/, { message: "A senha deve conter pelo menos uma letra minúscula." })
-    .regex(/[0-9]/, { message: "A senha deve conter pelo menos um número." }),
+export const registerEmployeeSchema = z.object({
+  firstName: z
+    .string()
+    .min(2, {
+      message: "O nome deve ter pelo menos 2 caracteres",
+    }),
+  lastName: z
+    .string()
+    .min(2, {
+      message: "O sobrenome deve ter pelo menos 2 caracteres",
+    }),
+  email: z
+    .string()
+    .email({
+      message: "Digite um email válido",
+    }),
+  password: z
+    .string()
+    .min(8, {
+      message: "A senha deve ter pelo menos 8 caracteres",
+    })
+    .regex(/[A-Z]/, {
+      message: "A senha deve conter pelo menos uma letra maiúscula",
+    })
+    .regex(/[a-z]/, {
+      message: "A senha deve conter pelo menos uma letra minúscula",
+    })
+    .regex(/[0-9]/, {
+      message: "A senha deve conter pelo menos um número",
+    }),
   confirmPassword: z.string({
-    required_error: "A confirmação de senha é obrigatória."
+    required_error: "A confirmação de senha é obrigatória",
   }),
-  documentNumber: z.string()
+  documentNumber: z
+    .string()
     .regex(/^\d{3}\.\d{3}\.\d{3}-\d{2}$/, {
-      message: "O CPF deve estar no formato 000.000.000-00."
+      message: "O CPF deve estar no formato 000.000.000-00",
     }),
-  phoneNumbers: z.array(phoneSchema).min(1, {
-    message: "É necessário informar pelo menos um telefone."
-  }),
-  department: z.enum(["TI", "RH", "Financeiro", "Marketing", "Vendas"], {
-    errorMap: () => ({ message: "Selecione um departamento válido." })
+  phoneNumbers: z
+    .array(phoneSchema)
+    .min(1, {
+      message: "É necessário informar pelo menos um telefone válido",
+    }),
+  department: z.string().refine((val) => ["Financeiro", "Vendas"].includes(val), {
+    message: "Selecione um departamento válido",
   }),
   role: z.nativeEnum(EmployeeRole, {
-    errorMap: () => ({ message: "Selecione um cargo válido." })
-  })
+    required_error: "Selecione um cargo válido",
+  }),
 }).refine((data) => data.password === data.confirmPassword, {
-  message: "As senhas não coincidem.",
-  path: ["confirmPassword"]
+  message: "As senhas não coincidem",
+  path: ["confirmPassword"],
 });
 
-export type RegisterFormValues = z.infer<typeof registerSchema>;
+// Função para validar os dados de registro
+export function validateRegisterData(values: unknown) {
+  try {
+    return registerEmployeeSchema.parse(values);
+  } catch (error) {
+    if (error instanceof z.ZodError) {
+      return { error: error.format() };
+    }
+    return { error };
+  }
+}
diff --git a/front-next/src/middleware.ts b/front-next/src/middleware.ts
index 0311026..68c8a05 100644
--- a/front-next/src/middleware.ts
+++ b/front-next/src/middleware.ts
@@ -1,9 +1,8 @@
 import { NextRequest, NextResponse } from 'next/server';
 
 
-// Definição mais clara de rotas públicas vs. protegidas
-const PUBLIC_ROUTES = [
 
+const PUBLIC_ROUTES = [
   '/auth/login',
   '/auth/register',
 ];
@@ -13,7 +12,13 @@ const API_AUTH_ROUTES = [
   '/api/auth/register',
 ];
 
-// Função para verificar se é um arquivo estático
+// Problema: diretório com parênteses está causando erro no build standalone
+// Verifica se o usuário está tentando acessar a rota principal que pode ter problemas
+const needsRedirectToAlternativeRoute = (path: string): boolean => {
+  // Se estiver tentando acessar a raiz ou algum caminho que passa por (routes)
+  return path === '/' || path.includes('/(routes)/');
+};
+
 const isStaticFile = (path: string): boolean => {
   return (
     path.startsWith('/_next') ||
@@ -22,42 +27,41 @@ const isStaticFile = (path: string): boolean => {
   );
 };
 
-// Função para verificar se é uma rota pública
 const isPublicRoute = (path: string): boolean => {
   return PUBLIC_ROUTES.some(route => path === route || path.startsWith(`${route}/`));
 };
 
-// Função para verificar se é uma rota de API pública
 const isPublicApiRoute = (path: string): boolean => {
   return API_AUTH_ROUTES.some(route => path === route || path.startsWith(`${route}/`));
 };
-console.log('Middleware executando para:');
+
 export async function middleware(request: NextRequest) {
   const { pathname } = request.nextUrl;
   
-  // Console log para debug (remova em produção)
   console.log('Middleware executando para:', pathname);
   
-  // Ignora arquivos estáticos
+  // Redirecionar para a versão alternativa da página que não usa parênteses no caminho
+  if (needsRedirectToAlternativeRoute(pathname)) {
+    console.log('Redirecionando para rota alternativa');
+    const url = new URL('/routes', request.url);
+    return NextResponse.rewrite(url);
+  }
+  
   if (isStaticFile(pathname)) {
     return NextResponse.next();
   }
   
-  // Permite acesso a rotas públicas
   if (isPublicRoute(pathname)) {
     return NextResponse.next();
   }
   
-  // Permite acesso a APIs de autenticação
   if (isPublicApiRoute(pathname)) {
     return NextResponse.next();
   }
   
-  // Verifica o token para rotas protegidas
   const token = request.cookies.get('auth_token')?.value;
   
   if (!token) {
-    // Se for uma solicitação de API, retorna erro 401
     if (pathname.startsWith('/api/')) {
       return new NextResponse(
         JSON.stringify({ message: 'Não autenticado' }),
@@ -68,39 +72,29 @@ export async function middleware(request: NextRequest) {
       );
     }
     
-    // Para rotas de página, redireciona para login
     const loginUrl = new URL('/auth/login', request.url);
     loginUrl.searchParams.set('callbackUrl', pathname);
     return NextResponse.redirect(loginUrl);
   }
   
   try {
-    // Verificação básica do token (validação de existência apenas)
-    // Para verificação completa, descomente o código abaixo
-    
-    /*
-    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
-    await jwtVerify(token, secret);
-    */
-    
-    // Token existe, prosseguir com a requisição
+    // Verificação do token simplificada
     return NextResponse.next();
   } catch (error) {
     console.error('Erro na validação do token:', error);
     
-    // Se o token for inválido, limpar o cookie e redirecionar
     const response = NextResponse.redirect(new URL('/auth/login', request.url));
     response.cookies.delete('auth_token');
     return response;
   }
 }
 
-// Configuração mais precisa do matcher
+
 export const config = {
   matcher: [
-    // Excluir arquivos estáticos específicos
+    
     '/((?!_next/static|_next/image|favicon.ico).*)',
-    // Incluir rotas de API, exceto as públicas de auth
+    
     '/api/:path*',
   ],
 };
\ No newline at end of file
diff --git a/front-next/src/providers/query-provider.tsx b/front-next/src/providers/query-provider.tsx
index 5ce8718..758a601 100644
--- a/front-next/src/providers/query-provider.tsx
+++ b/front-next/src/providers/query-provider.tsx
@@ -3,15 +3,15 @@
 import { ReactNode } from "react";
 import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 
-// Usando uma função factory para criar um novo cliente para cada requisição de servidor
-// Isso evita o compartilhamento de estado entre usuários no SSR
+
+
 function makeQueryClient() {
   return new QueryClient({
     defaultOptions: {
       queries: {
-        // Durante a exibição inicial, mostramos dados em cache ou placeholder
-        // enquanto os dados são carregados no lado do cliente
-        staleTime: 60 * 1000, // 1 minuto
+        
+        
+        staleTime: 60 * 1000, 
         refetchOnWindowFocus: true,
         retry: 1,
       },
@@ -19,17 +19,17 @@ function makeQueryClient() {
   });
 }
 
-// Esta instância pode ser diferente no lado cliente e servidor
+
 let browserQueryClient: QueryClient | undefined = undefined;
 
-// Obter o cliente para o ambiente atual (cliente ou servidor)
+
 const getQueryClient = () => {
-  // No servidor, sempre crie um novo cliente
+  
   if (typeof window === "undefined") {
     return makeQueryClient();
   }
   
-  // No cliente, reutilize o mesmo cliente
+  
   if (!browserQueryClient) {
     browserQueryClient = makeQueryClient();
   }
@@ -42,7 +42,7 @@ interface QueryProviderProps {
 }
 
 export function QueryProvider({ children }: QueryProviderProps) {
-  // Usar o cliente adequado para o ambiente atual
+  
   const queryClient = getQueryClient();
 
   return (
diff --git a/front-next/src/redux/features/theme/themeSlice.ts b/front-next/src/redux/features/theme/themeSlice.ts
index 59217b2..6276234 100644
--- a/front-next/src/redux/features/theme/themeSlice.ts
+++ b/front-next/src/redux/features/theme/themeSlice.ts
@@ -11,7 +11,7 @@ interface ThemeState {
   highContrast: boolean;
 }
 
-// Get initial theme from local storage if available
+
 const getInitialTheme = (): ThemeMode => {
   if (typeof window !== 'undefined') {
     const savedTheme = localStorage.getItem('theme-mode') as ThemeMode;
diff --git a/front-next/src/redux/hooks.ts b/front-next/src/redux/hooks.ts
index a05beef..144f65a 100644
--- a/front-next/src/redux/hooks.ts
+++ b/front-next/src/redux/hooks.ts
@@ -1,6 +1,6 @@
 import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
 import type { RootState, AppDispatch } from './store';
 
-// Use throughout your app instead of plain `useDispatch` and `useSelector`
+
 export const useAppDispatch = () => useDispatch<AppDispatch>();
 export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
\ No newline at end of file
diff --git a/front-next/src/redux/store/index.ts b/front-next/src/redux/store/index.ts
index 2dc09eb..7da3080 100644
--- a/front-next/src/redux/store/index.ts
+++ b/front-next/src/redux/store/index.ts
@@ -2,19 +2,19 @@ import { configureStore } from '@reduxjs/toolkit';
 import uiReducer from '../features/ui/uiSlice';
 import themeReducer from '../features/theme/themeSlice';
 
-// Create a makeStore function to properly handle SSR
+
 export const makeStore = () => {
   return configureStore({
     reducer: {
       ui: uiReducer,
       theme: themeReducer,
     },
-    // Disable devTools in production
+    
     devTools: process.env.NODE_ENV !== 'production',
   });
 };
 
-// Infer types
+
 export type AppStore = ReturnType<typeof makeStore>;
 export type RootState = ReturnType<AppStore['getState']>;
 export type AppDispatch = AppStore['dispatch'];
\ No newline at end of file
diff --git a/front-next/src/services/README.md b/front-next/src/services/README.md
deleted file mode 100644
index 3e5737c..0000000
--- a/front-next/src/services/README.md
+++ /dev/null
@@ -1 +0,0 @@
-Os serviços foram reorganizados em diretórios correspondentes (api, auth, employee, department, user, etc.). Cada serviço possui seu próprio diretório com index.ts para a camada de acesso a dados e queries.ts para hooks do React Query. Isto resolve a duplicação de código e padroniza a estrutura do projeto.
diff --git a/front-next/src/services/api/index.ts b/front-next/src/services/api/index.ts
index 16f6ace..2eb7ce4 100644
--- a/front-next/src/services/api/index.ts
+++ b/front-next/src/services/api/index.ts
@@ -1,4 +1,4 @@
-// Base API client com tratamento de erros robusto
+
 const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5244/api';
 
 export interface ApiResponse<T> {
diff --git a/front-next/src/services/auth/index.ts b/front-next/src/services/auth/index.ts
index a68f012..6a4f253 100644
--- a/front-next/src/services/auth/index.ts
+++ b/front-next/src/services/auth/index.ts
@@ -9,34 +9,28 @@ export interface CurrentUserResponse {
 }
 
 export const authService = {
-  /**
-   * Login user and get JWT token
-   */
+  
   login: async (credentials: LoginDTO): Promise<AuthResponseDTO> => {
-    return api.post<AuthResponseDTO>("/Auth/login", credentials);
+    return api.post<AuthResponseDTO>("/auth/login", credentials);
   },
   
-  /**
-   * Get currently authenticated user info
-   */
+  
   getCurrentUser: async (): Promise<CurrentUserResponse> => {
-    // Busca apenas as informações básicas do usuário
+    
     return api.get<CurrentUserResponse>("/Auth/me");
   },
   
-  /**
-   * Get detailed user info with employee data
-   */
+  
   getDetailedUserInfo: async (): Promise<Employee | CurrentUserResponse> => {
     try {
-      // Primeiro tenta obter o ID do usuário atual pelo endpoint /Auth/me
+      
       const basicUserInfo = await api.get<CurrentUserResponse>("/Auth/me");
       
       if (basicUserInfo && basicUserInfo.id) {
-        // Se tiver ID, busca informações completas pelo endpoint /Employees/{id}
+        
         try {
           const employeeData = await api.get<Employee>(`/Employees/${basicUserInfo.id}`);
-          // Certifique-se de que o empregado tem pelo menos o ID e email
+          
           if (!employeeData.id) {
             employeeData.id = basicUserInfo.id;
           }
@@ -57,18 +51,14 @@ export const authService = {
     }
   },
   
-  /**
-   * Save JWT token to localStorage
-   */
+  
   saveToken: (token: string): void => {
     if (typeof window !== 'undefined') {
       localStorage.setItem("auth_token", token);
     }
   },
   
-  /**
-   * Get JWT token from localStorage
-   */
+  
   getToken: (): string | null => {
     if (typeof window !== 'undefined') {
       return localStorage.getItem("auth_token");
@@ -76,25 +66,19 @@ export const authService = {
     return null;
   },
   
-  /**
-   * Remove JWT token from localStorage
-   */
+  
   removeToken: (): void => {
     if (typeof window !== 'undefined') {
       localStorage.removeItem("auth_token");
     }
   },
   
-  /**
-   * Check if user is authenticated
-   */
+  
   isAuthenticated: (): boolean => {
     return !!authService.getToken();
   },
   
-  /**
-   * Logout user
-   */
+  
   logout: (): void => {
     authService.removeToken();
   }
diff --git a/front-next/src/services/auth/queries.tsx b/front-next/src/services/auth/queries.tsx
index 0e360b7..d96d239 100644
--- a/front-next/src/services/auth/queries.tsx
+++ b/front-next/src/services/auth/queries.tsx
@@ -41,12 +41,12 @@ export const useCurrentUser = () => {
   return useQuery<CurrentUserResponse, ApiError>({
     queryKey: ["currentUser"],
     queryFn: () => authService.getCurrentUser(),
-    staleTime: 1000 * 60 * 5, // 5 minutes
-    enabled: authService.isAuthenticated(), // Only run if user is authenticated
+    staleTime: 1000 * 60 * 5, 
+    enabled: authService.isAuthenticated(), 
     retry: (failureCount, error) => {
-      // Don't retry on 401 (Unauthorized)
+      
       if (error instanceof ApiError && error.status === 401) {
-        authService.removeToken(); // Clear invalid token
+        authService.removeToken(); 
         return false;
       }
       return failureCount < 3;
@@ -58,12 +58,12 @@ export const useDetailedUserInfo = () => {
   return useQuery<any, ApiError>({
     queryKey: ["detailedUserInfo"],
     queryFn: () => authService.getDetailedUserInfo(),
-    staleTime: 1000 * 60 * 2, // 2 minutes (menor para reduzir problemas de concorrência)
-    enabled: authService.isAuthenticated(), // Only run if user is authenticated
-    refetchOnWindowFocus: true, // Recarregar quando a janela ganhar foco
-    refetchOnMount: true, // Recarregar quando o componente for montado
+    staleTime: 1000 * 60 * 2, 
+    enabled: authService.isAuthenticated(), 
+    refetchOnWindowFocus: true, 
+    refetchOnMount: true, 
     retry: (failureCount, error) => {
-      // Don't retry on 401 (Unauthorized)
+      
       if (error instanceof ApiError && error.status === 401) {
         return false;
       }
diff --git a/front-next/src/services/department/queries.ts b/front-next/src/services/department/queries.ts
index 7561e39..f49161b 100644
--- a/front-next/src/services/department/queries.ts
+++ b/front-next/src/services/department/queries.ts
@@ -18,7 +18,7 @@ export const useGetDepartments = () => {
   return useQuery<Department[], ApiError>({
     queryKey: ["departments"],
     queryFn: () => departmentService.getAll(),
-    staleTime: 1000 * 60 * 15, // 15 minutes
+    staleTime: 1000 * 60 * 15, 
   });
 };
 
@@ -27,7 +27,7 @@ export const useGetDepartment = (id: string) => {
   return useQuery<Department, ApiError>({
     queryKey: ["department", id],
     queryFn: () => departmentService.getById(id),
-    staleTime: 1000 * 60 * 5, // 5 minutes
+    staleTime: 1000 * 60 * 5, 
     enabled: !!id,
   });
 };
diff --git a/front-next/src/services/employee/index.ts b/front-next/src/services/employee/index.ts
index ccc16f7..7eb285f 100644
--- a/front-next/src/services/employee/index.ts
+++ b/front-next/src/services/employee/index.ts
@@ -74,7 +74,7 @@ export const employeeService = {
       return adaptEmployeeResponse(response);
     }
     
-    // Sem filtros, buscamos todos
+    
     const response = await api.get<any>('/Employees');
     return adaptEmployeeResponse(response);
   },
@@ -136,7 +136,7 @@ export const employeeService = {
     }
   },
   
-  // Adicionando funções que existiam no employee-service.ts
+  
   getDepartments: async (): Promise<{ id: string; name: string }[]> => {
     try {
       const response = await api.get<any>('/Departments');
diff --git a/front-next/src/services/employee/queries.ts b/front-next/src/services/employee/queries.ts
index d0c7391..0640c72 100644
--- a/front-next/src/services/employee/queries.ts
+++ b/front-next/src/services/employee/queries.ts
@@ -11,7 +11,7 @@ import {
 import { ApiError } from '..';
 import { isValidGuid } from '@/lib/utils';
 
-// Interface para o contexto de rollback
+
 interface RollbackContext {
   previousData?: Employee;
   previousDetailedData?: Employee;
@@ -31,7 +31,7 @@ export const useGetEmployees = (filters?: EmployeeFilters) => {
   return useQuery<PagedResult<Employee>, ApiError>({
     queryKey: ["employees", filters],
     queryFn: () => employeeService.getEmployees(filters),
-    staleTime: 1000 * 60 * 5, // 5 minutes
+    staleTime: 1000 * 60 * 5, 
   });
 };
 
@@ -39,7 +39,7 @@ export const useGetEmployee = (id: string) => {
   return useQuery<Employee, ApiError>({
     queryKey: ["employee", id],
     queryFn: () => employeeService.getEmployeeById(id),
-    staleTime: 1000 * 60 * 5, // 5 minutes
+    staleTime: 1000 * 60 * 5, 
     enabled: !!id, 
   });
 };
@@ -49,7 +49,7 @@ export const useGetManagers = () => {
   return useQuery<Employee[], ApiError>({
     queryKey: ["managers"],
     queryFn: () => employeeService.getManagers(),
-    staleTime: 1000 * 60 * 5, // 5 minutes
+    staleTime: 1000 * 60 * 5, 
   });
 };
 
@@ -97,27 +97,27 @@ export const useUpdateEmployeeProfile = () => {
     ApiError, 
     { id: string; data: Partial<UpdateEmployeeDTO> }
   >({
-    // Usar o contexto da mutação para implementar optimistic updates
+    
     mutationFn: async ({ id, data }) => {
       try {
-        // Implementar um mecanismo de retry com backoff exponencial
+        
         const maxRetries = 3;
         let retryCount = 0;
         let lastError = null;
         
         const executeWithRetry = async (): Promise<Employee> => {
           try {
-            // Obter versão mais recente do funcionário antes de atualizar
+            
             const currentEmployee = await employeeService.getEmployeeById(id);
             
-            // Preservar os IDs de telefone existentes ou adicionar novos conforme necessário
+            
             let updatedPhoneNumbers = [];
             
             if (data.phoneNumbers && data.phoneNumbers.length > 0) {
-              // Mapear por número de telefone para preservar os IDs
+              
               const currentPhoneMap = new Map();
               
-              // Indexar os telefones atuais pelo número
+              
               if (currentEmployee.phoneNumbers && currentEmployee.phoneNumbers.length > 0) {
                 currentEmployee.phoneNumbers.forEach(phone => {
                   if (phone.id) {
@@ -126,17 +126,17 @@ export const useUpdateEmployeeProfile = () => {
                 });
               }
               
-              // Atualizar ou manter os IDs existentes
+              
               updatedPhoneNumbers = data.phoneNumbers.map(phone => {
-                // Criar um objeto sem ID
+                
                 const phoneObj: any = {
                   number: phone.number,
                   type: phone.type
                 };
                 
-                // Se tiver ID e for uma string válida, incluir no objeto
+                
                 if (phone.id && typeof phone.id === 'string' && phone.id.trim() !== '') {
-                  // Verificar se é um GUID válido (usando função utilitária)
+                  
                   const isValidId = isValidGuid(phone.id.trim());
                   if (isValidId) {
                     phoneObj.id = phone.id.trim();
@@ -146,7 +146,7 @@ export const useUpdateEmployeeProfile = () => {
                 return phoneObj;
               });
             } else {
-              // Se não houver telefones no payload, manter os existentes
+              
               updatedPhoneNumbers = currentEmployee.phoneNumbers || [];
             }
 
@@ -164,7 +164,7 @@ export const useUpdateEmployeeProfile = () => {
 
             return employeeService.updateEmployee(id, completeData);
           } catch (error) {
-            // Se for um erro de concorrência e ainda não atingimos o número máximo de tentativas
+            
             if (error instanceof ApiError && 
                 error.message.includes('concorrência') && 
                 retryCount < maxRetries) {
@@ -172,15 +172,15 @@ export const useUpdateEmployeeProfile = () => {
               retryCount++;
               lastError = error;
               
-              // Aguardar um tempo crescente antes de tentar novamente (backoff exponencial)
-              const waitTime = Math.pow(2, retryCount) * 1000; // 2s, 4s, 8s
+              
+              const waitTime = Math.pow(2, retryCount) * 1000; 
               await new Promise(resolve => setTimeout(resolve, waitTime));
               
-              // Tentar novamente
+              
               return executeWithRetry();
             }
             
-            // Se não for erro de concorrência ou atingiu máximo de tentativas, propagar o erro
+            
             throw error;
           }
         };
@@ -192,42 +192,44 @@ export const useUpdateEmployeeProfile = () => {
       }
     },
     onMutate: async ({ id, data }) => {
-      // Cancelar consultas em andamento para evitar sobrescrever nossa atualização otimista
+      
       await queryClient.cancelQueries({ queryKey: ["employee", id] });
       await queryClient.cancelQueries({ queryKey: ["detailedUserInfo"] });
       
-      // Guardar o estado anterior para rollback em caso de erro
+      
       const previousData = queryClient.getQueryData(["employee", id]);
       const previousDetailedData = queryClient.getQueryData(["detailedUserInfo"]);
       
-      // Retornar o contexto com os dados anteriores para rollback se necessário
+      
       return { previousData, previousDetailedData };
     },
     onSuccess: (updatedEmployee) => {
-      // Atualizar o cache com os novos dados
+      
       queryClient.setQueryData(["employee", updatedEmployee.id], updatedEmployee);
       queryClient.setQueryData(["detailedUserInfo"], updatedEmployee);
       
-      // Invalidar outras queries relacionadas para forçar recarregamento
+      
       queryClient.invalidateQueries({ queryKey: ["currentUser"] });
       queryClient.invalidateQueries({ queryKey: ["employees"] });
       
       toast.success("Perfil atualizado com sucesso!");
     },
-    onError: (error, _variables, context: RollbackContext) => {
+    onError: (error, _variables, context) => {
       console.error("Profile update error:", error);
       
-      // Restaurar os dados anteriores do cache para rollback em caso de erro
-      if (context?.previousData && context.previousDetailedData) {
-        queryClient.setQueryData(["employee", _variables.id], context.previousData);
-        queryClient.setQueryData(["detailedUserInfo"], context.previousDetailedData);
+      // Type assertion for the context
+      const typedContext = context as RollbackContext | undefined;
+      
+      if (typedContext?.previousData && typedContext.previousDetailedData) {
+        queryClient.setQueryData(["employee", _variables.id], typedContext.previousData);
+        queryClient.setQueryData(["detailedUserInfo"], typedContext.previousDetailedData);
       }
       
-      // Tratar o erro específico
+      
       if (error instanceof ApiError && error.message.includes('concorrência')) {
         toast.error("Erro de concorrência: Outra pessoa pode ter editado os dados. Tente novamente.");
         
-        // Recarregar dados atualizados
+        
         queryClient.invalidateQueries({ queryKey: ["employee", _variables.id] });
         queryClient.invalidateQueries({ queryKey: ["detailedUserInfo"] });
       } else {
@@ -235,7 +237,7 @@ export const useUpdateEmployeeProfile = () => {
       }
     },
     onSettled: (_data, _error, variables) => {
-      // Independentemente do resultado (sucesso ou falha), garantir que os dados estejam atualizados
+      
       queryClient.invalidateQueries({ queryKey: ["employee", variables.id] });
       queryClient.invalidateQueries({ queryKey: ["detailedUserInfo"] });
     }
@@ -278,14 +280,12 @@ export const useDeleteEmployee = () => {
   });
 };
 
-/**
- * Get employees by department hook
- */
+
 export const useGetEmployeesByDepartment = (departmentId: string) => {
   return useQuery<Employee[], ApiError>({
     queryKey: ["employees", "department", departmentId],
     queryFn: () => employeeService.getByDepartment(departmentId),
-    staleTime: 1000 * 60 * 5, // 5 minutes
+    staleTime: 1000 * 60 * 5, 
     enabled: !!departmentId,
   });
 };
\ No newline at end of file
diff --git a/front-next/src/services/index.ts b/front-next/src/services/index.ts
index d5eedfa..db0f7b1 100644
--- a/front-next/src/services/index.ts
+++ b/front-next/src/services/index.ts
@@ -1,4 +1,4 @@
-// Serviços exportados por camada
+
 export { api, ApiError } from './api';
 export * from './auth';
 export * from './employee';
diff --git a/front-next/src/services/user/queries.ts b/front-next/src/services/user/queries.ts
index b6e6c51..230a4bb 100644
--- a/front-next/src/services/user/queries.ts
+++ b/front-next/src/services/user/queries.ts
@@ -11,7 +11,7 @@ import { toast } from 'sonner';
 import { ApiError } from 'next/dist/server/api-utils';
 
 
-// Error handler utility
+
 const handleApiError = (error: unknown, defaultMessage: string) => {
   if (error instanceof ApiError) {
     toast.error(error.message);
@@ -21,16 +21,14 @@ const handleApiError = (error: unknown, defaultMessage: string) => {
   console.error(error);
 };
 
-/**
- * Hook para obter dados do usuário atual
- */
+
 export const useCurrentUser = () => {
   return useQuery<Employee, ApiError>({
     queryKey: ["currentUser"],
     queryFn: () => userService.getCurrentUser(),
-    staleTime: 1000 * 60 * 5, // 5 minutos
+    staleTime: 1000 * 60 * 5, 
     retry: (failureCount, error) => {
-      // Não tentar novamente em caso de erro 401 (não autenticado)
+      
       if (error instanceof ApiError && error.statusCode === 401) {
         return false;
       }
@@ -40,9 +38,7 @@ export const useCurrentUser = () => {
   });
 };
 
-/**
- * Hook para atualizar o perfil do usuário atual
- */
+
 export const useUpdateProfile = () => {
   const queryClient = useQueryClient();
 
@@ -55,7 +51,7 @@ export const useUpdateProfile = () => {
     onSuccess: (updatedUser) => {
       toast.success("Perfil atualizado com sucesso!");
       
-      // Atualizar dados em cache
+      
       queryClient.setQueryData(["currentUser"], updatedUser);
       queryClient.setQueryData(["employee", updatedUser.id], updatedUser);
     },
@@ -65,9 +61,7 @@ export const useUpdateProfile = () => {
   });
 };
 
-/**
- * Hook para alteração de senha do usuário atual
- */
+
 export const useChangePassword = () => {
   return useMutation<void, ApiError, UpdatePasswordDTO>({
     mutationFn: (data) => userService.changePassword(data),
diff --git a/front-next/src/test/mocks/handlers.ts b/front-next/src/test/mocks/handlers.ts
index 243cb9f..580b7f7 100644
--- a/front-next/src/test/mocks/handlers.ts
+++ b/front-next/src/test/mocks/handlers.ts
@@ -13,7 +13,7 @@ const mockEmployee = {
   documentNumber: "12345678900",
   birthDate: new Date("1990-01-01").toISOString(),
   age: 33,
-  role: 2, // Leader
+  role: 2, 
   department: "TI",
   phoneNumbers: [
     { id: "1", number: "11999999999", type: 1 }
@@ -22,7 +22,7 @@ const mockEmployee = {
   updatedAt: new Date().toISOString()
 };
 
-// Mock auth response
+
 const mockAuthResponse = {
   token: "mock-jwt-token",
   expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
@@ -37,10 +37,10 @@ const mockCurrentUser = {
   role: "Leader"
 };
 
-// Define handlers for API endpoints
+
 export const handlers = [
-  // Auth endpoints
-  http.post(`${API_URL}/Auth/login`, async ({ request }) => {
+  
+  http.post(`${API_URL}/auth/login`, async ({ request }) => {
     const body = await request.json() as { email: string; password: string };
     
     if (body.email === "test@example.com" && body.password === "password123") {
@@ -57,7 +57,7 @@ export const handlers = [
     return HttpResponse.json(mockCurrentUser);
   }),
   
-  // Employee endpoints
+  
   http.get(`${API_URL}/Employees`, () => {
     return HttpResponse.json([mockEmployee]);
   }),
@@ -115,7 +115,7 @@ export const handlers = [
     return new HttpResponse(null, { status: 404 });
   }),
   
-  // Department endpoints
+  
   http.get(`${API_URL}/Departments`, () => {
     return HttpResponse.json([
       { id: "1", name: "TI", description: "Tecnologia da Informação" },
diff --git a/front-next/src/test/mocks/server.ts b/front-next/src/test/mocks/server.ts
index 6e52ba6..03eaacf 100644
--- a/front-next/src/test/mocks/server.ts
+++ b/front-next/src/test/mocks/server.ts
@@ -1,5 +1,5 @@
 import { setupServer } from 'msw/node';
 import { handlers } from './handlers';
 
-// Setup requests interception using the given handlers
+
 export const server = setupServer(...handlers);
\ No newline at end of file
diff --git a/front-next/src/test/utils/test-utils.tsx b/front-next/src/test/utils/test-utils.tsx
index 6ad8001..de21443 100644
--- a/front-next/src/test/utils/test-utils.tsx
+++ b/front-next/src/test/utils/test-utils.tsx
@@ -4,7 +4,20 @@ import userEvent from '@testing-library/user-event';
 import { EmployeeRole } from '@/types/employee';
 
 
-const AuthContext = createContext({
+interface AuthContextType {
+  user: {
+    id: string;
+    name: string;
+    email: string;
+    role: EmployeeRole;
+  } | null;
+  isLoading: boolean;
+  login: () => Promise<void>;
+  logout: () => void;
+  canCreateRole: (role: EmployeeRole) => boolean;
+}
+
+const AuthContext = createContext<AuthContextType>({
   user: null,
   isLoading: false,
   login: async () => {},
@@ -39,17 +52,12 @@ const MockAuthProvider = ({ children, mockRole = EmployeeRole.Leader }: { childr
   );
 };
 
-// Custom render function that includes providers
+
 interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
   mockRole?: EmployeeRole;
 }
 
-/**
- * Custom render function that wraps the component with necessary providers
- * @param ui - The React component to render
- * @param options - Custom render options including mockRole for AuthProvider
- * @returns The rendered component with user-event setup
- */
+
 export function renderWithProviders(
   ui: ReactElement,
   { mockRole, ...options }: CustomRenderOptions = {}
@@ -68,6 +76,6 @@ export function renderWithProviders(
   };
 }
 
-// Re-export everything from testing-library
+
 export * from '@testing-library/react';
 export { userEvent };
diff --git a/front-next/src/types/employee.ts b/front-next/src/types/employee.ts
index ab7b14c..65d2412 100644
--- a/front-next/src/types/employee.ts
+++ b/front-next/src/types/employee.ts
@@ -35,7 +35,7 @@ export interface Employee {
   phoneNumbers: Phone[];
   createdAt?: Date | string;
   updatedAt?: Date | string;
-  // Para compatibilidade com CurrentUserResponse
+  
   name?: string;
 }
 
@@ -80,7 +80,7 @@ export interface UpdateEmployeeDTO {
   managerId?: string;
   birthDate: string | Date
   phoneNumbers: {
-    // id deve ser um GUID válido para a API .NET, deve ser omitido se não for válido
+    
     id?: string;
     number: string;
     type: PhoneType | number;
@@ -115,10 +115,7 @@ export interface PagedResult<T> {
   hasNextPage: boolean;
 }
 
-/**
- * Interface unificada que combina propriedades de Employee e CurrentUserResponse
- * para garantir compatibilidade e segurança de tipos em componentes que usam ambos
- */
+
 export interface UnifiedUserData {
   id: string;
   firstName: string;
@@ -133,9 +130,7 @@ export interface UnifiedUserData {
   phoneNumbers: Phone[];
 }
 
-/**
- * Tipo utilitário para facilitar operações com usuários
- */
+
 export type UserDataSource = Employee | CurrentUserResponse | UnifiedUserData | null | undefined;
 
 
